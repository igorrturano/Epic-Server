/////////////////////////////////////////////////////////////////////
//
// Program Name: createnpc
//
// Author: Yukiko
//
// Date Created: 2020-01-24
//
// Description: Text command used for creating NPCs.
//
// Parameters: NPC template name (optional)
//
// Return Value: none.
//
/////////////////////////////////////////////////////////////////////
use uo;
use cliloc;
use cfgfile;
use datafile;

include ":gumps:selectionGump";
include ":gumps:gumpPrompt";
include ":attributes:attributes";
include ":ghaia:ghaia";
include "include/epicNPCUtils";

program	text_command_createnpc(who, template)
	var	mercscripts := {"appraiser", "barber", "banker", "bucsBanker", "bucsTownHealer",
						"healer", "merchant", "stablemaster", "townguard", "townHealer"};
	var	guardscripts := {"townGuard", "instakillGuard"};
	var	npc_config := ReadConfigFile(":*:npcdesc");
	var node :="none";
	var	NPC_entry;
	var	ai_script;
	if (!template)
		template := DisplayNPCSelectionMenu(who);
		if (!template)
			return;
		endif
		// We have the NPC template. So we can create it as if the user had entered a template.
//		node := "none";
	endif

	NPC_entry := FindConfigElem(npc_config, template);
	ai_script := GetConfigString(NPC_entry, "Script");

	if(ai_script in mercscripts)
		node := "merc";
	elseif(ai_script in guardscripts)
		node := "gard";
	else
		node := "none";
	endif

	if(node != "none")
		GumpPrompt(who, "The NPC you want to create requires a listening node. Therefore I will create one instead of the NPC." +
						"Target the location for the node. Use (double-click) the node to create the NPC.", 1, hue:=1153);
	endif


	case (node)

		"none":	createthenpc(who, template);
		"merc":	createmerc(who);
		"gard":	createguard(who);

	endcase

//	createthenpc(who, template);
	return;

endprogram

/////////////////////////////////////////////////////////////////
// Start functions
/////////////////////////////////////////////////////////////////

function createthenpc(who, text)
	text := SplitWords(text);
	var template := text[1];
	var tier := text[2] ? text[2] : "0";
	var loc := TargetCoordinates(who);
	if(!loc)
		SendSysMessage(who, "Cancelled.", color := 33);
		return 0;
	endif
	var props := struct;
	props.+facing := who.facing;

	var result := CreateNpcFromTemplate(":epicAI:"+template, loc.x, loc.y, loc.z, props, loc.realm );
	if (!result)
		result := CreateNpcFromTemplate(":brainAI:"+template, loc.x, loc.y, loc.z, props, loc.realm );
		if(!result)
			result := CreateNpcFromTemplate(":merchants:"+template, loc.x, loc.y, loc.z, props, loc.realm );
			if(!result)
				SendSysMessage( who, "NPC Creation Failed: " + result.errortext );
			endif
		endif
	endif

	customizeNpc(result, tier);
endfunction

function createmerc(who)
	Start_Script( ":merchantnodes:textcmd/gm/createnode", who );
endfunction

function createguard(who)

	var loc := TargetCoordinates(who);
	if(!loc)
		SendSysMessage(who, "Cancelled.", color := 33);
	return 0;
	endif
	if(!CreateItemAtLocation(loc.x, loc.y, loc.z, "guardnode", 1, loc.realm))
		SendSysMessage(who, "Oh dear. For some reason I couldn't create the node.", color := 33);
	endif

endfunction

function DisplayNPCSelectionMenu(who)

	var Taxonomy_props := {};
	var NPC_List := {};
	var Taxonomy_Selection := "";
	var NPC_Selection := "";
	var NPC_Taxonomy_df := OpenDataFile( ":npcs:NPCsByTaxonomy" );
	var Tkey := NPC_Taxonomy_df.FindElement("Taxonomies");
	Taxonomy_props := Tkey.PropNames();

	var Settings_cfg := ReadConfigFile(":npcs:settings");
	var tax_elem := FindConfigElem( settings_cfg, "Taxonomy" );
	var Tax_desc := {};
	foreach Tax_prop in Taxonomy_props
		Tax_desc[_Tax_prop_iter] := Tax_prop + " - " + GetConfigString( tax_elem, Tax_prop );
	endforeach
	Taxonomy_Selection := SelectionGumpEx( who, "Taxonomy - Select one:", Taxonomy_props, BTN_TYPE_NORMAL, 0, tax_desc);
	if(Taxonomy_Selection.errortext)
		SendSysMessageCl(who, 1042023, color := 33); // Cancelled.
		exit;
	endif
	NPC_List := TKey.GetProp(Taxonomy_Selection);
	NPC_Selection := SelectionGumpEx( who, "NPCs - Select one:", NPC_List, BTN_TYPE_NORMAL);
	if(NPC_Selection.errortext)
		SendSysMessageCl(who, 1042023, color := 33); // Cancelled.
		exit;
	endif
	return NPC_Selection;

endfunction
