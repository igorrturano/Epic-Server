// use uo;
use cfgfile;

include ":gumps:gumpPrompt";

program	text_command_createnpc(who, template)



	var	mercscripts := {"appraiser", "barber", "banker", "bucsBanker", "bucsTownHealer", "davesHealer",
						"healer", "merchant", "stablemaster", "townguard", "townHealer"};
	var	guardscripts := {"townGuard", "instakillGuard"};
	var	npc_config := ReadConfigFile(":*:npcdesc");
	var node :="";
	var	NPC_entry;
	var	ai_script;

	if (!template)
		template := DisplayNPCSelectionMenu (who);
		if (!template)
			return;
		endif
		// We have the NPC template. So we can create it as if the user had entered a template.
//		node := "none";
	endif

	NPC_entry := FindConfigElem( npc_config, template );
	ai_script := GetConfigString( NPC_entry, "Script" );

	if(ai_script in mercscripts)
		node := "merc";
	elseif(ai_script in guardscripts)
		node := "gard";
	else
		node := "none";
	endif

/*	if(node != "none")
		GumpPrompt(who, "The NPC you want to create requires a listening node. Therefore I will create one instead of the NPC.
						Target the location for the node. Use (double-click) the node to create the NPC.", 1, hue:=1153);
	endif


	case (node)

		"none":	createthenpc(who, template);
		"merc":	createmerc(who);
		"gard":	createguard(who);

	endcase
*/
createthenpc(who, template);
	return;

endprogram



/////////////////////////////////////////////////////////////////
// Start functions
/////////////////////////////////////////////////////////////////

function createthenpc(who, template)
	var loc := TargetCoordinates(who);
	if(!loc)
		SendSysMessage(who, "Cancelled.", color := 33);
		return 0;
	endif
	var props := struct;
	props.+facing := who.facing;
	var result := CreateNpcFromTemplate( template, loc.x, loc.y, loc.z, props, loc.realm );
	if (!result)
		SendSysMessage( who, "NPC Creation Failed: " + result.errortext );
	endif
endfunction

function createmerc(who)

	Start_Script( ":merchantnodes:textcmd/gm/createnode", who );
/*		var thingy := CreateItemAtLocation(loc.x, loc.y, loc.z, "merchantnode", 1, loc.realm);
	if(!thingy)
		SendSysMessage(who, "Oh dear. For some reason I couldn't create the node.", color := 33);
	endif
*/
endfunction

function createguard(who)

	var loc := TargetCoordinates(who);
	if(!loc)
		SendSysMessage(who, "Cancelled.", color := 33);
	return 0;
	endif
	if(!CreateItemAtLocation(loc.x, loc.y, loc.z, "guardnode", 1, loc.realm))
		SendSysMessage(who, "Oh dear. For some reason I couldn't create the node.", color := 33);
	endif

endfunction


function DisplayNPCSelectionMenu (who)
	var npcmenu := CreateMenu ("Select an NPC type:");
	var thegroups := {};
	var index := 1;
	var Groups_cfg := ReadConfigFile("NPC_Groups");
	var NPC_Groups := GetConfigStringKeys( Groups_cfg );
//		SendSysMessage(who, "Length of NPC_Groups is " + CStr(Len(NPC_Groups)));

	foreach group in NPC_Groups
			var elem := FindConfigElem (Groups_cfg, group);
			if (elem)
				AddMenuItem (npcmenu, elem.GroupGraphic, NPC_Groups[index]); // NPC_Groups is an array of group names
				thegroups.append (group);
				index := index + 1;
			endif
	endforeach

	var selection := SelectMenuItem2 (who, npcmenu);
	if (!selection)
		SendSysmessage (who, "Canceled.", color := 33);
		return;
	endif

	var thegroup := NPC_Groups [selection.index];
	SendSysMessage (who, "You chose " + thegroup);

	var elem := FindConfigElem (Groups_cfg, thegroup);
	if (!elem)
		SendSysMessage (who, "Whoops!  Big error!", color := 33);
		return;
	endif

	var thenpctypes := GetConfigStringArray (elem, "npc");
	if (!thenpctypes or !len (thenpctypes))
		SendSysMessage (who, "No NPCs in that group.", color := 33);
		return;
	endif

	var npcmenu2 := CreateMenu ("Select an NPC type:");
	var thenpcs := {};
	foreach entry in thenpctypes
		var template := SplitWords (entry)[1];
		var graphic := CInt (SplitWords (entry)[2]);
		AddMenuItem (npcmenu2, graphic, template);
		thenpcs.append (template);
	endforeach

	var selection2 := SelectMenuItem2 (who, npcmenu2);
	if (!selection2)
		SendSysmessage (who, "Canceled.", color := 33);
		return;
	endif

	return thenpcs [selection2.index];
endfunction

