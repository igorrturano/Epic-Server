/*
 * $Id*
 *
 */

use uo;
use os;

include ":brainAI:npcNerves";
include ":brainAI:npcCommands";
include ":brainAI:commonFunctions";
include ":attributes:attributes";
include ":magery:spells_ex";
include "include/facings";
include ":combat:damage";

program BrainNerve(params)
	var npc		:= params[1];
	var nerve_name	:= params[2];
	var event	:= params[3];
	var settings	:= params[4];
	var scripts	:= params[5];
	params := 0; // Not needed anymore.

	//Store it here so it does not have to do the math over and over.
	var flee_level := NPC_GetFleeLevel(npc, settings["FleeLevel"]);
	
	var opponent := event.source;
	var flee_mode := 0;

	AI_SetOpponent(npc, opponent);

	while( npc )
		var dist := Distance(npc, opponent);
		if ( ShouldFlee(npc, flee_level, flee_mode) )
			flee_mode := 1;
			AI_WarMode(npc, 0);
			AI_Move(npc, opponent, NEMOVE_AWAY, NEMOVE_RUN, WAKEUP, 100);
		elseif ( DoneFighting(npc, opponent, dist) )
			if ( scripts.Exists("EndFight") )
				params := array{npc, "EndFight", opponent, settings, scripts};
				AI_StartNerve(npc, "EndFight", scripts["EndFight"].script, params);
			else
				AI_WarMode(npc, 0);
			endif
			AI_EndNerve(npc, nerve_name);
		elseif ( dist < settings["MinRange"] )
			AI_Move(npc, opponent, NEMOVE_AWAY, NEMOVE_RUN, WAKEUP, (settings["MinRange"]-dist));
		elseif( dist > settings["MaxRange"] )
			AI_Move(npc, opponent, NEMOVE_TOWARD, NEMOVE_RUN, WAKEUP, (dist-settings["MaxRange"]));
		else
			npc.facing := GetFacing(npc.x, npc.y, opponent.x, opponent.y);
		endif

		SpecialAttack(npc, opponent, settings, dist);

		sleepms(400);
		AI_ClearThoughts(npc, CLR_NERVE);
	endwhile
endprogram

function DoneFighting(npc, opponent, byref dist)
	if ( opponent.dead )
		return 1;
	elseif ( !opponent )
		return 1;
	elseif ( opponent.hidden )
		return 1;
	elseif ( opponent.concealed > npc.cmdlevel )
		return 1;
	elseif ( dist > 20 )
		return 1;
	elseif ( dist > 10 && !CheckLineOfSight(npc, opponent) )
		return 1;
	endif

	return 0;
endfunction

function ShouldFlee(npc, byref flee_level, byref flee_mode)
	if ( flee_mode )
		return 1;
	elseif ( AP_GetVital(npc, "Hits") < flee_level )
		return 1;
	endif

	return 0;
endfunction

function SpecialAttack(npc, opponent, byref settings, byref dist)

	if ( GetObjProperty(npc, "#medding") )
		printtextabove(npc, "medding");
		return 0;
	elseif ( CInt(GetObjProperty(npc, "#NextCast")) > ReadGameClock() )
		printtextabove(npc, "nexcast");
		return 0;
	elseif ( AP_GetVital(npc, MANA) <= 10 )
		printtextabove(npc, "low mana");
		return 0;
	elseif ( !CheckLineOfSight(npc, opponent) )
		printtextabove(npc, "los");
		return 0;
	elseif ( dist > settings["MaxRange"] )
		printtextabove(npc, "dist");
		return 0;
	endif
	
	var npc_elem := NPC_GetNPCConfig(npc.npctemplate);
	var spell_list := GetConfigStringArray(npc_elem, "Spell");
	var cast_spell := spell_list[RandomInt(spell_list.Size())+1];
	cast_spell := SplitWords(cast_spell);
	var spell_id := 5;//MS_SpellNameToId(cast_spell[1]);

	printtextabove(npc, "spell: " + cast_spell);	
	printtextabove(npc, "spell_id: " + spell_id);	

	if ( !spell_id )
		printtextabove(npc, "no spellid");
		return 0;
	//elseif ( RandomInt(100) > CInt(cast_spell[2]) )
	//	return 0;
	endif
	
	var script := Start_Script(":magery:spellStarter", {npc, spell_id, 0, opponent});
	if ( script.errortext )
		PrintTextAbove(npc, script.errortext);
		return 0;
	endif
	
	SetObjProperty(npc, "#NextCast", ReadGameClock()+settings["CastWait"]);
	
	return 1;
endfunction
