/*
throwCombat - Katabrok
AI Settings necessÃ¡rias:
  throwHit (int sound)
  throwDamage (string dice)
  throwItem (int item)
  throwNum (int quantidade)
  throwRange (int dist)
AI Settings opcionais:
  throwMiss (int sound)
  throwAnim (int anim)
*/

use uo;
use os;

include ":brainAI:npcNerves";
include ":brainAI:npcCommands";
include ":brainAI:commonFunctions";
include ":attributes:attributes";
include "include/shapes";
include "include/client";
include "include/sounds";
include "include/facings";
include ":combat:damage";
include ":acid:acid";

program BrainNerve(params)
	var npc		:= params[1];
	var nerve_name	:= params[2];
	var event	:= params[3];
	var settings	:= params[4];
	var scripts	:= params[5];
	params := 0; // Not needed anymore.

	//Store it here so it does not have to do the math over and over.
	var flee_level := NPC_GetFleeLevel(npc, settings["FleeLevel"]);

	var opponent := event.source;
	var flee_mode := 0;

	AI_SetOpponent(npc, opponent);

	while( npc )
		var dist := Distance(npc, opponent);
		if ( ShouldFlee(npc, flee_level, flee_mode) )
			flee_mode := 1;
			AI_Move(npc, opponent, NEMOVE_AWAY, NEMOVE_RUN, WAKEUP, 100);
		elseif ( DoneFighting(npc, opponent, dist) )
			if ( scripts.Exists("EndFight") )
				params := array{npc, "EndFight", opponent, settings, scripts};
				AI_StartNerve(npc, "EndFight", scripts["EndFight"].script, params);
			else
				AI_WarMode(npc, 0);
			endif
			AI_EndNerve(npc, nerve_name);
		elseif( dist > settings["AcidRange"] && dist < settings["AcidRange"] * 2)
			AI_Move(npc, opponent, NEMOVE_TOWARD, NEMOVE_RUN, WAKEUP, dist);
			if ( CInt(GetObjProperty(npc, "#NextShoot")) < ReadGameClock() )
				SpitAcid(npc, opponent);
				SetObjProperty(npc, "#NextShoot", ReadGameClock()+3);
			endif
		elseif ( dist > 1);
			AI_Move(npc, opponent, NEMOVE_TOWARD, NEMOVE_RUN, WAKEUP, dist);
		else
			npc.facing := GetFacing(npc.x, npc.y, opponent.x, opponent.y);
		endif

		sleepms(400);
		AI_ClearThoughts(npc, CLR_NERVE);
	endwhile
endprogram

function DoneFighting(npc, opponent, byref dist)
	if ( opponent.dead )
		return 1;
	elseif ( !opponent )
		return 1;
	elseif ( opponent.hidden )
		return 1;
	elseif ( opponent.concealed > npc.cmdlevel )
		return 1;
	elseif ( dist > 20 )
		return 1;
	elseif ( dist > 10 && !CheckLineOfSight(npc, opponent) )
		return 1;
	endif

	return 0;
endfunction

function ShouldFlee(npc, byref flee_level, byref flee_mode)
	if ( AP_GetVital(npc, "Hits") < flee_level )
		return 1;
	endif

	return 0;
endfunction
