use uo;
use os;

include ":brainAI:eventid";
include ":brainAI:npcNerves";
include ":brainAI:npcCommands";
include ":containers:storageAreas";
include ":containers:containers";
include ":fls_core:tax";

function OpenAICompletion(systemMessage, questions)

   var formatedQuestions := array{ struct{
      "role" := "system",
      "content" := systemMessage
   } };

   foreach question in questions
      if (typeof(question) != "Struct" || (!question.exists("assistant") && !question.exists("user")))
         return struct{ "error" := "Each question must be a struct containing the keys 'assistant' and 'user'" };
      endif

      if (question.exists("assistant"))
         formatedQuestions.append(struct{
            "role" := "assistant",
            "content" := question["assistant"]
         });
      endif

      if (question.exists("user"))
         formatedQuestions.append(struct{
            "role" := "user",
            "content" := question["user"]
         });
      endif
   endforeach

   var apiURL := "https://api.openai.com/v1/chat/completions";
   var method := "POST";
   var jsonData := PackJSON(struct{
      "model" := "gpt-4o-mini",
      "messages" := formatedQuestions
   });

   var apiResponse := HTTPRequest(
         apiURL,
         method,
         struct{
            data := jsonData,
            headers := struct{
               "Content-Type" := "application/json",
               "Authorization" := "Bearer {1}".format(GetEnvironmentVariable("OPENAI_KEY"))
            }
         }
      );
   var unpackedJSON := UnpackJSON(apiResponse);
   return unpackedJSON["choices"][1]["message"]["content"];
endfunction

program BrainNerve(params)
	var npc		:= params[1];
	//var nerve_name:= params[2];
	var event	:= params[3];
	//var settings	:= params[4];
	//var scripts	:= params[5];
	params := 0; // Not needed anymore.

	while ( npc )
		if ( event )
			case ( event.type )
				SYSEVENT_SPEECH:
					SpeechEvent(npc, event);
					break;
				default:
					break;
			endcase

			event := 0;
		endif

		sleepms(5);
		event := wait_for_event(100000);
	endwhile
endprogram

function SpeechEvent(npc, byref event)
	var text := Lower(event.text);
	var source := event.source;

	if ( source.IsA(POLCLASS_NPC) )
		// Remember - NPCs can send speech events now.
		return 0;
	elseif ( !CheckLineOfSight(npc, event.source) )
		// No line of sight - ignore speech.
		return 0;
	endif

	// Support for regional banking.
	// Example: Seperate bank boxes for Britain, Trinsic, Moonglow, etc.
	var bank_region := GetObjProperty(npc, "City");
	if ( !bank_region )
		bank_region := CP_DEFAULT_AREA;
	endif


	if ( text["banco"] || text["cofre"] )
		var sourceRaca := GetObjProperty(event.source, "chardata").raca;
		var sourceDescription := GetObjProperty(event.source, "descricao");
		if (Distance(npc, event.source) > 2)
			AI_Speak(npc, "Se aproxime para mexer no seu cofre.");
			return 0;
		endif
		AI_Turn(npc, source, NETURN_TOWARD);
		var bank_box := CP_GetStorageContainerForMobile(source, bank_region, CP_NOCREATE);
		if ( !bank_box ) 
			var systemMessage := "Você é um banqueiro medieval de RPG. Responda como tal. O personagem que fala com você é um " + sourceRaca + " com descrição " + sourceDescription + ". O personagem não tem uma conta no banco. Pergunte se ele deseja se registrar. Máximo de 50 caracteres.";
			var questions := array{ struct{ "user" := text } };
			var responseText := OpenAICompletion(systemMessage, questions);
            AI_Speak(npc, responseText); // usa a responsa do modelo
			
		else 
			bank_box := CP_GetStorageContainerForMobile(source, bank_region);
			PayTaxes(source.serial, bank_region, bank_box);
			if (isDevedor(source.serial, bank_region))
				var divida := GetDivida(source.serial, bank_region);
				AI_Speak(npc, "Voce esta em divida com o banco no total de " + divida);
				AI_Speak(npc, "Voce so podera ver suas coisas quando pagar. Se quiser pode pagar agora.");
				var alvo := Target(source);
				if (alvo)
					if (alvo.objtype == 0xff21)
						if (alvo.amount >= divida)
							SubtractAmount(alvo, divida);
							AI_Speak(npc, "Sua divida esta paga.");
						else
							AI_Speak(npc, "Esse valor nao paga sua divida.");
						endif
					endif
				endif
			else
				
				var systemMessage := "Você é um banqueiro medieval de RPG. Responda como tal. O aventureiro que fala com você é um " + sourceRaca + " com descrição " + sourceDescription + ". Máximo de 50 caracteres.";
				var questions := array{ struct{ "user" := text } };
				var responseText := OpenAICompletion(systemMessage, questions);
				AI_Speak(npc, responseText); // usa a responsa do modelo
				//AI_Speak(npc, "Aqui esta seu cofre.") ;
				SendOpenSpecialContainer(source, bank_box);
			endif
		endif
	elseif ( text["registrar"] || text["filiar"] )
		if (!hasAccount(source.serial, bank_region))
			AI_Speak(npc, "Vou criar sua conta e seu registro aqui na cidade.");
			var oldcity := GetPlayerCity(source.serial);
			if (oldcity != error )
				RemovePlayer(source.serial, oldcity);
			endif
			var bank_box := CP_GetStorageContainerForMobile(source, bank_region, CP_CREATE);	
			SetupPlayerAccount(source.serial, bank_region);
			//var taxes := GetCityTaxes(bank_region);
			//AddTaxToPlayer(source.serial, taxes); 
		else
			AI_Speak(npc, "Voce ja possui uma conta aqui.");
			AI_Speak(npc, "Se quiser pode *abandonar* do banco.");
		endif
	elseif ( text["abandonar"] )
		if (hasAccount(source.serial, bank_region))
			AI_Speak(npc, "Vou remover sua conta dessa cidade.");
			RemovePlayer(event.serial, bank_region);
		endif
	elseif ( text["bom dia"] || text["boa noite"] || text["boa tarde"] )
		AI_Speak(npc, "Ola, em que posso ajuda-lo? Neste *banco* eu cuido do *cofre*.");
	endif

	return 1;
endfunction

function WithdrawlGold(npc, who, bank_box, byref text)
	var amount := FindAmountInSpeech("withdrawl", text);
	if ( !CheckGoldAmount(npc, bank_box, amount) )
		return 0;
	endif

	ConsumeSubstance(bank_box, GetObjTypeByName("GoldCoin"), amount);
	CreateItemInBackPack(who, "GoldCoin", amount);

	return 1;
endfunction

function CheckGoldAmount(npc, bank_box, amount)
	var total_gold := AmountInContainer(bank_box, GetObjTypeByName("GoldCoin"));
	if ( amount == 0 )
		AI_Speak(npc, "Everyone has atleast zero gold!");
		return 0;
	elseif ( amount > total_gold )
		AI_Speak(npc, "You do not have that much gold in your box.");
		return 0;
	else
		AI_Speak(npc, "You have enough gold.");
		return 1;
	endif
endfunction

function FindAmountInSpeech(key, text)
	var key_pos := Find(text, key, 1);
	text[1, (key_pos+Len(key))] := "";

	text := SplitWords(text);
	return CInt(text[1]);
endfunction