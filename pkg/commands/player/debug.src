/*
 * O comando checa (e cria/remove) uma CProp temporária com o nome passado no debugName
 * Modelo da CProp: #debug_<string>
 * Exemplo da CProp: #debug_clima
 *
 * Forma de uso:
 * Dar include ":commands:debugsystem" no script que for usar
 * e adicionar a função DebugMsg(who, debugType, msg) dentro do script
 * Exemplo de uso:
 * 
 * include ":commands:debugsystem";
 *
 * var debugType := "clima";
 * DebugMsg(who, debugType, "Está chovendo bastante!");
 *
 * Para scripts que não tenha who (Ref de Char) usar DebugMsgEvent(debugType, msg);
 * Exemplo de uso:
 *
 * var debugType := "clima";
 * DebugMsgEvent(debugType, "Está chovendo bastante!");
 */
use uo;

include ":debug:main";
include "include/say";

program CMD_debug(who, debugName)
	debugName.Lower();
	
    if (!debugName || Lower(debugName) == "list")
		SendSysMessage(who, "Lista de debugs disponíveis: ");
		foreach debug in listDebugs
			SendSysMessage(who, $"Tag: {debug.name} - PLevel: {debug.level}");
		endforeach
		return;
	endif
	
	foreach debug in listDebugs
        if (Lower(debugName) == Lower(debug.name))
            if (who.cmdlevel >= debug.level)
                who.setDebugProp(debugName);
                return;
            else
                SendSysMessageEx(who, $"DEBUG {debugName}:  Nível insuficiente.");
				return;
            endif
        endif
    endforeach

    SendSysMessageEx(who, $"DEBUG {debugName}: inexistente. Confira se a tag está correta.");
	SendSysMessageEx(who, "Para ver os debug disponíveis digite: .debug ou .debug list");
endprogram
