//TODO: [IMPLEMENTS] Ao clicar 2x na panela, abrir um gump parar derreter os minérios
	//TODO: Planejar como fazer o design desse gump
	//TODO: Iterar pelo metal escolhido e procurar a quantidade que o player digitou
	//TODO: Marcar a imagem Imagem de cada Ore e ao lado um box para digitar a quantidade
	//TODO: Iterar a quantidade digitada em cada box pra ver se forma a liga (se não formar, perde a quantidade digitada)

// GRAPHICS:
	// Elven Forge: 0x2DD8
	// Elven Anvil: 0x2DD5 - 0x2DD6
	// Soulforge Anvil: 0x4254 - 0x4257
	// Forge: 0xB203 - 0xB20A
	// Forge (com tampa): 0xB4F1 - 0xB502

//use uo;
//use os;

//include "include/client";
include ":fls_core:fls_crafting";
//include ":attributes:attributes";
include ":itemutils:objtype";
include ":gathering:mining";
include ":gathering:smelting/water";
include ":gathering:smelting/smelt";
include ":commands:debugsystem";
include ":gumps:gumps";
include ":gumps:gumps_ex";

const PROP_NAME := "Smelting";
const COLOR_FULL := 0x486;
const COLOR_EMPTY := 951;
const SOUND_SMELTING := 0x22;
const SOUND_COOLING := 0x23F;

program smelt_that_ore(who, item)
	EraseObjProperty(who, "IsMeditating");
	EraseObjProperty(who, "HealTimer");

	if(!Accessible(who, item))
		return;
	endif

	OpenGump(who, item);
endprogram

function OpenGump(who, pot)
	var GUMP_WIDTH := 395;
	var GUMP_HEIGHT := 565;
	var GUMP_BACKGROUND := 39929;
	var INTERNAL_BACKGROUND := 9350;
	var gump := GFECreateGump(400, 565, GUMP_BACKGROUND, "Menu de Smelting");

	var ores := getAllOres();
	var ableToSmelt_amt := dictionary{};
	var ableToSmelt_item := dictionary{};
	var ableToSmelt_ore := dictionary{};
	var indexAbleToSmelt := array{};
	var bag := EnumerateItemsInContainer(who.backpack);
	var oresInBag := array{}; //Pra reduzir as buscas lá na frente, já que é recorrente
	foreach ore in ores
		foreach ore2 in bag
			if (ore.oreObjType == ore2.objtype)
				oresInBag.append(ore2);
			endif
		endforeach
	endforeach

	foreach ore in ores //Feito assim pra manter a ordem da lista de ores, apesar de diminuir um pouco o desempenho
		foreach item1 in oresInBag
			if (item1.objtype == ore.oreObjType)
				var amt := item1.amount;
				var size := Len(ore.neededToCraft);

				var i := 0;
				foreach item2 in bag
					if (item2.objType in ore.neededToCraft)
						if (item2.amount < amt)
							amt := item2.amount;
						endif
						i++;
					endif
				endforeach
				
				if (i == size)
					indexAbleToSmelt.append(ore.oreObjType);
					ableToSmelt_amt[ore.oreObjType] := amt;
					ableToSmelt_item[ore.oreObjType] := item1;
					ableToSmelt_ore[ore.oreObjType] := ore;
				endif
			endif
		endforeach
	endforeach

	var x := 30;
	var y := 120;
	var y_space := 50;
	var btnID := 100;
	var tBoxAmt := Dictionary{};
	var options := array{};
	foreach oreObjType in indexAbleToSmelt
		var graphic := 0x1BF4; //TODO: MELHORAR ESSE GET

		if (ableToSmelt_ore[oreObjType].oreType == ORE_CHARCOAL)
			graphic := 0xDF9;
		endif

		GFAddButton(gump, x, y, 2151, 2154, GF_CLOSE_BTN, btnID);
		GFTilePic(gump, x + 30, y, graphic, ableToSmelt_ore[oreObjType].color);
		GFTextLine(gump, x + 90, y + 5, ableToSmelt_ore[oreObjType].color, ableToSmelt_ore[oreObjType].ingotName);
		tBoxAmt[oreObjType] := GFEAddTextBox(gump, x + 200, y, 30, 15, COLOR_YELLOW, ableToSmelt_amt[oreObjType], 0, 4);
		options.append(struct{
			"btnID" := btnID,
			"oreObjType" := oreObjType
			});
		y += y_space;
		btnID++;
	endforeach

	var input;
	var toSmeltItems := array{};
	var toSmeltOre;
	var toSmeltAmount;
	var choice := dictionary{};
	while (1)
		input := GFSendGump(who, gump);
		if (input[0] == 1)
			return;
		else
			foreach option in options
				if (input[0] == option.btnID)
					var neededOresToSmelt := ableToSmelt_ore[option.oreObjType].neededToCraft;
					toSmeltAmount := GFExtractData(input, tBoxAmt[option.oreObjType]);
					toSmeltOre := ableToSmelt_ore[option.oreObjType];
					toSmeltItems := getItemsInBag(neededOresToSmelt, bag);
					
					DebugMsg(who, DEBUG_NAME_SMELTING, "Item: " + toSmeltItems);
					DebugMsg(who, DEBUG_NAME_SMELTING, "Quantidade: " + toSmeltAmount);
				endif
			endforeach
			break;
		endif
	endwhile

	if(!CheckSmelt(who, toSmeltOre, toSmeltItems))
		return;
	endif

	SmeltOres(who, pot, toSmeltOre, toSmeltItems, toSmeltAmount);
	
endfunction

function CheckSmelt(who, mainOre, itemsToSmelt)
	foreach ore in itemsToSmelt
		if(!ReserveItem(ore))
			return 0;
		endif

		if(!Accessible(who, ore))
			SendSysMessageEx(who, "Você não alcança "+ore.name, FONT_NORMAL, SSM_FAIL);
			return 0;
		endif
	endforeach
	
	if (!CheckForWater(who))
		SendSysMessageEx(who, "Nenhuma fonte de água próxima encontrada.", SSM_FAIL);
		return 0;
	endif

	if (mainOre.oreType == ORE_MITHRIL) //Se for Mithril verificar SoulForge
		if (!CheckForSoulForge(who))
			SendSysMessageEx(who, "Você precisa estar perto da Forja das Almas para usar este item.", SSM_FAIL);
			return 0;
		endif
	else //Qualquer outro, pode ser qualquer forja
		if(!CheckForForge(who))
			SendSysMessageEx(who, "Você precisa estar perto de uma forja para usar este item.", SSM_FAIL);
			return 0;
		endif
	endif

	return 1;
endfunction

function SmeltOres(who, pot, mainOre, itemsToSmelt, amt)
	if (CheckSmeltDifficulty(who, mainOre))
		if (Len(itemsToSmelt) > 1)
			SendSysMessageEx(who, "Você fez a fusão entre os metais.", FONT_NORMAL, 90);
		else
			SendSysMessageEx(who, "Você derreteu o minério e retirou as impurezas", FONT_NORMAL, 90);
		endif

		var prop := struct{
			"ingot" := mainOre.ingotObjType,
			"amount" := amt
		};
		SetObjProperty(pot, PROP_NAME, prop);

		foreach item in itemsToSmelt
			SmeltSuccess(who, pot, item, amt);
			SleepMS(500);
		endforeach

		CoolPot(who, pot);
	endif

	return 1;
endfunction

function CoolPot(who, pot)
	var inPot := GetObjProperty(pot, PROP_NAME);
	PlayEffectCooling(who, pot);
	pot.color := COLOR_EMPTY;
	EraseObjProperty(pot, PROP_NAME);
	CreateItemInBackpack(who, inPot.ingot, CInt(inPot.amount));
endfunction

function SmeltSuccess(who, pot, item, amt)
	PrintTextAbove(who, "*derretendo minerios*");
	SubtractAmount(item, CInt(amt));
	PlayEffectSmelt(who, pot);
endfunction

function SmeltFail(who, ore, amt)
	var amtLost := RandomInt(3)+1;
	if (amtLost > amt)
		amtLost := amt;
	endif
	SubtractAmount(ore, CInt(amtLost));
	SendSysMessageEx(who, "Você perdeu "+amtLost+" "+ore.name, FONT_NORMAL, SSM_FAIL);
endfunction

function CheckSmeltDifficulty(who, ore)
	var diff := DetermineMiningDifficulty(ore.oreObjType);
	if(SkillCheck(who, GATHERING, diff, ((diff / 2) + 10)) > 0)
		return 1;
	endif
	return 0;
endfunction

function PlayEffectSmelt(who, pot)
	pot.color := COLOR_FULL;
	who.frozen := 1;
	PlaySoundEffect(who, SOUND_SMELTING);
	Sleep(4);
endfunction

function PlayEffectCooling(who, pot)
	pot.color := COLOR_EMPTY;
	PlaySoundEffect(who, SOUND_COOLING);
	SleepMS(1500);
	who.frozen := 0;
endfunction

function getItemsInBag(toSearch, bag)
	var items := array{};
	foreach ore in toSearch
		foreach item in bag
			if (item.objtype == ore)
				items.append(item);
			endif
		endforeach
	endforeach
	return items;
endfunction
