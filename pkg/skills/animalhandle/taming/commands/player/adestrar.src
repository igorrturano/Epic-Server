use cfgfile;
use uo;
use os;
use util;

include ":attributes:attributes";
include ":attributes:stats";
include ":brainAI:include/npcCommands";
include ":gumps:gumps_ex";
include ":gumps:gumps"; //add
include "include/say";
include ":taming:taming";
include ":mounts:mounts";
include ":tn:characters";
include ":tn:boss";
include ":charactercreation:habilidades";
//include ":damage:damage"; para os criticos talvez?

const START_Y	   := 91;
const END_Y	   := 311;
const BACKGROUND   := 0xBB8;
const FOREGROUND   := 0xDAC;
const INIT_DET_PAGE := 10;

var template;
var index_list;
var info_cfg;
var entries_list := dictionary;
var btn_maxId := 2;
var new_list := array;
var det_page := INIT_DET_PAGE; //numero da pagina de detalhes

set_script_option(SCRIPTOPT_CAN_ACCESS_OFFLINE_MOBILES, 1);

program tamingskill(who)
    taming(who);
endprogram

function taming(who)
	SendSysMessageEx(who, "Que animal voce deseja adestrar?", SSM_REQUEST);
	var targ := target(who);
	if( who.hidden )
		who.hidden := 0;
	endif
	if ( !targ.IsA(POLCLASS_NPC) )
		SendSysMessageEx(who, "Cancelado", SSM_FAIL);
		return;
	elseif ( targ.script[":ghaia:tamed"] ) // Verifica se o animal ja esta domado/ tem script de tamed
		SendSysMessageEx(who, targ.name+" nao pode ser adestrado.", SSM_FAIL);
		return 0;
	elseif ( (GetNumPets(who) + GetPetCost(targ)) > GetMaxPets(who) )
		SendSysMessageEx(who, "Este animal excede a sua capacidade atual de animais domesticados.", SSM_FAIL);
		return 0;
	endif

	if (!CheckLineOfSight(who, targ)) 
		SendSysMessage(who, "Você não consegue ver " + targ.name + " claramente.");
		return;
	endif
	if (isBoss(targ))
		SendSysMessageEx(who, "Essa criatura nao aceita ser domesticada.", SSM_FAIL);
		return 0;
	endif

	var cfg := ReadConfigFile(":brainai:npcdesc");
	var npctemplate := targ.npctemplate;
	npctemplate := npctemplate[10, len(npctemplate)-9];
	cfg := cfg[npctemplate];
	if ( !cfg.TameDifficulty )
		SendSysMessageEx(who, "Voce nao pode adestrar "+targ.name+".", SSM_FAIL);
		return;
	endif

	var skill := AP_GetSkill(who, HANDLEANIMAL);
	var info := struct;
	info.+x := who.x;
	info.+y := who.y;
	info.+facing := who.facing;
	info.+difficulty := cfg.TameDifficulty;
	if (info.difficulty > (skill + 15))
    	SendSysMessageEx(who, "A dificuldade para adestrar " + targ.name + " é muito alta (" + info.difficulty + ").", SSM_FAIL);
		return 0;
	endif

	cfg := 0;

	SetTamingCooldown(who);

	while( TameLoop(who, targ, info) )
			SetTamingCooldown(who);

			sleep(3);
			if ( SkillCheck(who, HANDLEANIMAL, CInt(info.difficulty)) > 0 )
				SendSysMessageEx(who, "Voce ganhou a confianca de "+targ.name+".", SSM_INFO);
				targ.SetMaster(who);
				var erase_selvagem := GetObjProperty(targ, "Selvagem");
				SetTamedProperties(targ, who);

				Run_Script_To_Completion(":death:npcdeath", {targ});

				var tamed := GetObjProperty(who, "TamedPets");
				if ( !tamed )
					tamed := array;
				endif
				tamed.append(targ.serial);
				SetObjProperty(who, "TamedPets", tamed);

				break;
			endif

		if ( events_waiting() )
			clear_event_queue();
		endif


	endwhile
	PostTameSuccess(who, targ);
endfunction

function TameLoop(who, targ, byref info)
	if (!CheckHostileConditions(who, targ)) 
    	return 0;
	endif

	PrintText(who, "*tentando adestrar " + targ.name + "*");

	var ownerarray := GetObjProperty(targ, "LastOwners"); //identifica se teve último dono
if(!ownerarray)
    ownerarray := {};
 endif
	var check := SkillCheck(who, HANDLEANIMAL, info.difficulty);
	if (( check > 0 ) || (who.serial in ownerarray) )
		SendSysMessageEx(who, ""+targ.name+" parece ser seu amigo.", SSM_INFO);
		AI_MoveXY(targ, info.x, NEMOVE_TOWARD, NEMOVE_WALK, WAKEUP, 1);

		return 1;
	elseif (check < -15 )
		var dist := Distance(who, targ);
		SetObjProperty(targ, "#ForceFlee", 1);
		AI_Move(targ, who, NEMOVE_AWAY, NEMOVE_RUN, NOWAKE, 100);
		sleepms(160);
		if ( dist == Distance(who, targ) )
			SendSysMessageEx(who, targ.name+" nao aceitou voce como dono.", SSM_FAIL);
		else
			SendSysMessageEx(who, "Voce assustou "+targ.name+" .", SSM_FAIL);
		endif
		return 0;
	else
		SendSysMessageEx(who, "Voce falhou ao domar esse animal!", SSM_FAIL);
		return 0;
	endif
endfunction

function SetTamingCooldown(who)
    SetObjProperty(who, "#tamewait", ReadGameClock() + 5);
endfunction

function SetTamedProperties(targ, who)
    SetObjProperty(targ, "owner", who.serial);
    SetObjProperty(targ, "name", targ.name);
    SetObjProperty(targ, "script", targ.script);
    SetObjProperty(targ, "happiness", 50);
    SetObjProperty(targ, "AntigoTreinadorID", who.serial);
    SetObjProperty(targ, "Fidelizar?", "nao");
    
    var time := ReadGameClock();
    SetObjProperty(targ, "countercheck", time);
    if (GetObjProperty(targ, "Selvagem") == 1)
        EraseObjProperty(targ, "Selvagem");
        EraseObjProperty(targ, "Critic");
    endif
    targ.script := ":ghaia:tamed";
    RestartScript(targ);
endfunction

function CheckHostileConditions(who, targ)
    var my_hostiles := ListHostiles(who, 15);
    var targ_hostiles := ListHostiles(targ, 15);

    if (targ.master)
        SendSysMessage(who, targ.name + " nao pode ser adestrado.", SSM_FAIL);
        return false;
    endif
    if (targ_hostiles.size() > 0) 
        SendSysMessageEx(who, "Alguém está atacando " + targ.name + ".", SSM_FAIL);
        return false;
    endif
    if (my_hostiles.size() > 0) 
        SendSysMessageEx(who, "Você não pode adestrar " + targ.name + " enquanto está sendo atacado.", SSM_FAIL);
        return false;
    endif
    return true;
endfunction

function PostTameSuccess(who, targ)
    SendSysMessageEx(who, "Você domesticou " + targ.name + " com sucesso!", SSM_INFO);
endfunction