use uo;
use os;

include ":attributes:attributes";
include ":gumps:gumps";
include ":gumps:gumps_ex";
include ":combat:damage";

const GUMP_BACKGROUND := 39929;
const INTERNAL_BACKGROUND := 9350;
const GUMP_WIDTH := 520;
const GUMP_HEIGHT := 600;

const MAX_RANGE := 30;
const MIN_INTERVAL := 4;
const MAX_INTERVAL := 300;

program danosetup(who, rune)
    if (who.cmdlevel < 2)
        SendSysMessage(who, "Você não tem permissão para usar isso.");
        return;
    endif

    var gump := CreateGump(rune);
    var input := GFSendGump(who, gump);

    if (input[0] == 100)
        SaveConfigurations(who, rune, input);
    else
        SendSysMessage(who, "Configuração cancelada.");
    endif
endprogram

function CreateGump(rune)
    var gump := GFCreateGump();
    GFClosable(gump, 1);
    GFDisposable(gump, 0);
    
    GFGumpPicTiled(gump, 10, 10, 495, 575, GUMP_BACKGROUND);
    AdicionarMoldura(gump);
    
    GFResizePic(gump, 15, 70, INTERNAL_BACKGROUND, GUMP_WIDTH - 20, GUMP_HEIGHT - 80);
    
    GFTextMid(gump, 20, 20, 480, 53, "Configuração de Área de Dano");

    var y := 90;

    // Raio da área
    GFTextLine(gump, 20, y, 53, "Raio da área de dreno (1-" + MAX_RANGE + "):");
    GFResizePic(gump, 305, y-5, INTERNAL_BACKGROUND, 60, 30);
    GFTextEntry(gump, 320, y, 50, 25, 2100, GetObjProperty(rune, "range") ? GetObjProperty(rune, "range") : "6", 1);
    y += 30;

    // Intervalo entre drenos
    GFTextLine(gump, 20, y, 53, "Intervalo entre os drenos (" + MIN_INTERVAL + "-" + MAX_INTERVAL + " seg):");
    GFResizePic(gump, 305, y-5, INTERNAL_BACKGROUND, 60, 30);
    GFTextEntry(gump, 320, y, 50, 25, 2100, GetObjProperty(rune, "intervalo") ? GetObjProperty(rune, "intervalo") : "4", 2);
    y += 40;

    // Atributos para drenar
    GFTextLine(gump, 20, y, 53, "Atributos para drenar (selecione):");
    y += 25;
    var hits_checked := GetObjProperty(rune, "hits") ? 1 : 0;
    var mana_checked := GetObjProperty(rune, "mana") ? 1 : 0;
    var stam_checked := GetObjProperty(rune, "stam") ? 1 : 0;
    GFCheckBox(gump, 20, y, 0x9CE, 0x9CF, hits_checked, 10);
    GFTextLine(gump, 45, y, 2100, "Hitpoints");
    GFTextLine(gump, 200, y, 2100, "Qtd. Hits:");
    GFResizePic(gump, 305, y-5, INTERNAL_BACKGROUND, 60, 30);
    GFTextEntry(gump, 320, y, 50, 25, 2100, GetObjProperty(rune, "hits") ? GetObjProperty(rune, "hits") : "", 3);
    y += 25;
    GFCheckBox(gump, 20, y, 0x9CE, 0x9CF, mana_checked, 11);
    GFTextLine(gump, 45, y, 2100, "Manapoints");
    GFTextLine(gump, 200, y, 2100, "Qtd. Mana:");
    GFResizePic(gump, 305, y-5, INTERNAL_BACKGROUND, 60, 30);
    GFTextEntry(gump, 320, y, 50, 25, 2100, GetObjProperty(rune, "mana") ? GetObjProperty(rune, "mana") : "", 4);
    y += 25;
    GFCheckBox(gump, 20, y, 0x9CE, 0x9CF, stam_checked, 12);
    GFTextLine(gump, 45, y, 2100, "Staminapoints");
    GFTextLine(gump, 200, y, 2100, "Qtd. Stam:");
    GFResizePic(gump, 305, y-5, INTERNAL_BACKGROUND, 60, 30);
    GFTextEntry(gump, 320, y, 50, 25, 2100, GetObjProperty(rune, "stam") ? GetObjProperty(rune, "stam") : "", 5);
    y += 40;

    // Tipo de dano
GFTextLine(gump, 20, y, 53, "Tipo de dano (selecione um ou mais):");
y += 25;
var damage_types := array{DMG_PHYSICAL, DMG_FIRE, DMG_COLD, DMG_POISON, DMG_ENERGY};
var damage_names := array{"Físico", "Fogo", "Frio", "Veneno", "Energia"};
foreach dmg_type in damage_types
    GFCheckBox(gump, 20, y, 0x9CE, 0x9CF, GetObjProperty(rune, "tipo_dano_"+dmg_type) ? 1 : 0, 20 + _dmg_type_iter);
    GFTextLine(gump, 45, y, 2100, damage_names[_dmg_type_iter]);
    y += 25;
endforeach
y += 15;

    // Mensagem para o jogador
    GFTextLine(gump, 20, y, 53, "Mensagem para o jogador:");
    y += 25;
    GFResizePic(gump, 20, y, INTERNAL_BACKGROUND, 350, 60);
    GFTextEntry(gump, 25, y+5, 340, 50, 2100, GetObjProperty(rune, "mensagem") ? GetObjProperty(rune, "mensagem") : "O ambiente afeta seu corpo.", 6);

    GFAddButton(gump, GUMP_WIDTH - 60, GUMP_HEIGHT - 50, 0x81C, 0x81B, GF_CLOSE_BTN, 100);

    return gump;
endfunction

function AdicionarMoldura(byref gump)
    var molduras := array{
        struct{ x := 0, y := 0, width := 25, height := 25, gump := 39925 },
        struct{ x := GUMP_WIDTH - 25, y := 0, width := 35, height := 25, gump := 39927 },
        struct{ x := 25, y := 0, width := GUMP_WIDTH - 41, height := 25, gump := 39926 },
        struct{ x := 25, y := GUMP_HEIGHT - 25, width := GUMP_WIDTH - 25, height := 35, gump := 39932 },
        struct{ x := 0, y := 25, width := 10, height := GUMP_HEIGHT - 50, gump := 39928 },
        struct{ x := GUMP_WIDTH -25, y := 25, width := 35, height := GUMP_HEIGHT - 50, gump := 39930 },
        struct{ x := GUMP_WIDTH - 25, y := GUMP_HEIGHT - 25, width := 35, height := 35, gump := 39933 },
        struct{ x := 0, y := GUMP_HEIGHT - 25, width := 35, height := 35, gump := 39931 }
    };

    foreach moldura in molduras
        GFGumpPicTiled(gump, moldura.x, moldura.y, moldura.width, moldura.height, moldura.gump);
    endforeach
endfunction

function SaveConfigurations(who, rune, input)
    var range := CInt(GFExtractData(input, 1));
    if (range < 1 || range > MAX_RANGE)
        SendSysMessage(who, "Raio inválido. Usando valor padrão de 6.");
        range := 6;
    endif
    SetObjProperty(rune, "range", range);

    var intervalo := CInt(GFExtractData(input, 2));
    if (intervalo < MIN_INTERVAL || intervalo > MAX_INTERVAL)
        SendSysMessage(who, "Intervalo inválido. Usando valor padrão de 4 segundos.");
        intervalo := 4;
    endif
    SetObjProperty(rune, "intervalo", intervalo);
    
    if (input[10])
        SetObjProperty(rune, "hits", CInt(GFExtractData(input, 3)));
    else
        EraseObjProperty(rune, "hits");
    endif
    
    if (input[11])
        SetObjProperty(rune, "mana", CInt(GFExtractData(input, 4)));
    else
        EraseObjProperty(rune, "mana");
    endif
    
    if (input[12])
        SetObjProperty(rune, "stam", CInt(GFExtractData(input, 5)));
    else
        EraseObjProperty(rune, "stam");
    endif
    
var damage_types := array{DMG_PHYSICAL, DMG_FIRE, DMG_COLD, DMG_POISON, DMG_ENERGY};
foreach dmg_type in damage_types
    if (input[20 + _dmg_type_iter])
        SetObjProperty(rune, "tipo_dano_"+dmg_type, 1);
    else
        EraseObjProperty(rune, "tipo_dano_"+dmg_type);
    endif
endforeach
    
    SetObjProperty(rune, "mensagem", GFExtractData(input, 6));

    SendSysMessage(who, "Configurações salvas com sucesso!");
endfunction