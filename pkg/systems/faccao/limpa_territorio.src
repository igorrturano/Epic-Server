use uo;
use os;
use datafile;
use polsys;

include ":faccao:faccao_constants";
include ":faccao:include/logging";
include ":faccao:include/datafile_helpers";
include ":faccao:include/territory_management";  // Incluir o novo módulo centralizado

program limpa_territorio(params)
    LogInfo("territorio", "======================= INÍCIO DA EXECUÇÃO =======================");
    LogDebug("territorio", "Iniciando limpa_territorio.src usando o sistema centralizado");
    
    var territorio_id := params[1];
    var faction := params[2];
    var who := params[3];
    var target_realm := params.size() >= 4 ? CStr(params[4]) : "britannia";
    
    LogInfo("territorio", "Parâmetros recebidos:");
    LogInfo("territorio", "   - territorio_id: '" + territorio_id + "'");
    LogInfo("territorio", "   - faction: '" + faction + "'");
    LogInfo("territorio", "   - who: " + (who ? who.name + " (Serial: " + who.serial + ")" : "null"));
    LogInfo("territorio", "   - realm específico: '" + target_realm + "'");
    LogInfo("territorio", "   - Número total de parâmetros: " + params.size());
    
    // Estrutura para o relatório final
    var report := struct{
        "territory_id" := territorio_id,
        "territory_name" := "",
        "faction" := faction,
        "objects_found" := 0,
        "objects_removed" := 0,
        "chest_removed" := 0,
        "desk_removed" := 0,
        "board_removed" := 0,
        "errors" := array{},
        "cleanup_method" := "unknown",
        "realm" := target_realm
    };
    
    // ETAPA 1: Obter informações completas do território usando TM_GetTerritoryInfo
    LogDebug("territorio", "Buscando informações do território via TM_GetTerritoryInfo");
    var territory_info := TM_GetTerritoryInfo(territorio_id);
    
    if (!territory_info)
        LogError("territorio", "Território não encontrado: " + territorio_id);
        report.errors.append("Território não encontrado no sistema");
        
        if (who)
            SendSysMessage(who, "Erro: Território não encontrado no sistema.");
        endif
        
        LogInfo("territorio", "Resumo final da operação:");
        LogInfo("territorio", "   - Território não encontrado");
        LogInfo("territorio", "======================= FIM DA EXECUÇÃO =======================");
        
        return 0;
    endif
    
    LogInfo("territorio", "Território encontrado: " + territory_info.name);
    report.territory_name := territory_info.name;
    
    // Usar realm do território se disponível
    if (territory_info.realm)
        target_realm := territory_info.realm;
        report.realm := target_realm;
        LogDebug("territorio", "Usando realm do território: " + target_realm);
    endif
    
    // Recuperar coordenadas do território
    var coordinates := struct{
        "x1" := 0,
        "y1" := 0,
        "x2" := 0,
        "y2" := 0
    };
    
    if (territory_info.rect)
        var coords := SplitWords(territory_info.rect);
        LogDebug("territorio", "Coords separados: " + coords.size() + " elementos");
        
        if (coords.size() >= 4)
            coordinates.x1 := CInt(coords[1]);
            coordinates.y1 := CInt(coords[2]);
            coordinates.x2 := CInt(coords[3]);
            coordinates.y2 := CInt(coords[4]);
            LogDebug("territorio", "Coordenadas do território: (" + coordinates.x1 + "," + coordinates.y1 + ") a (" + coordinates.x2 + "," + coordinates.y2 + ")");
        else
            LogError("territorio", "Formato de coordenadas inválido: " + territory_info.rect);
            report.errors.append("Formato de coordenadas inválido");
        endif
    else
        LogWarning("territorio", "Território sem coordenadas definidas");
        report.errors.append("Território sem coordenadas definidas");
    endif
    
    // ETAPA 2: Usar a função TM_DeleteTerritoryObjects para remover objetos
    LogInfo("territorio", "Iniciando remoção de objetos usando TM_DeleteTerritoryObjects");
    
    var objects_removed := TM_DeleteTerritoryObjects(territorio_id, faction);
    
    if (objects_removed > 0)
        LogInfo("territorio", "TM_DeleteTerritoryObjects removeu " + objects_removed + " objetos");
        report.objects_removed := objects_removed;
        report.cleanup_method := "tm_delete_territory_objects";
        
        // Estimativa aproximada da distribuição de objetos removidos
        // Normalmente seriam 3 objetos por território (baú, mesa e mural)
        if (objects_removed >= 3)
            report.chest_removed := 1;
            report.desk_removed := 1;
            report.board_removed := 1;
        elseif (objects_removed == 2)
            report.chest_removed := 1;
            report.desk_removed := 1;
        elseif (objects_removed == 1)
            report.chest_removed := 1;
        endif
    else
        LogWarning("territorio", "TM_DeleteTerritoryObjects não conseguiu remover objetos");
        report.errors.append("Falha no método principal de remoção");
    endif
    
    // ETAPA 3: Verificação manual apenas se a função TM não conseguiu remover tudo
    if (objects_removed < 3)
        LogInfo("territorio", "Iniciando verificação manual para garantir remoção completa");
        
        // Encontrar objetos do território usando TM_FindTerritoryObjects
        var territory_objects := TM_FindTerritoryObjects(territorio_id, faction);
        
        if (territory_objects)
            LogDebug("territorio", "TM_FindTerritoryObjects encontrou objetos para verificação adicional");
            
            // Verificar e destruir o baú
            if (territory_objects.bau)
                LogDebug("territorio", "Verificando baú: " + territory_objects.bau.name + " (Serial: " + territory_objects.bau.serial + ")");
                if (DestruirObjeto(territory_objects.bau))
                    report.chest_removed := 1;
                    report.objects_removed += 1;
                    LogInfo("territorio", "Baú destruído com sucesso no estágio de verificação");
                else
                    LogError("territorio", "Falha ao destruir baú no estágio de verificação");
                    report.errors.append("Falha ao destruir baú");
                endif
            endif
            
            // Verificar e destruir a mesa
            if (territory_objects.mesa)
                LogDebug("territorio", "Verificando mesa: " + territory_objects.mesa.name + " (Serial: " + territory_objects.mesa.serial + ")");
                if (DestruirObjeto(territory_objects.mesa))
                    report.desk_removed := 1;
                    report.objects_removed += 1;
                    LogInfo("territorio", "Mesa destruída com sucesso no estágio de verificação");
                else
                    LogError("territorio", "Falha ao destruir mesa no estágio de verificação");
                    report.errors.append("Falha ao destruir mesa");
                endif
            endif
            
            // Verificar e destruir o mural
            if (territory_objects.mural)
                LogDebug("territorio", "Verificando mural: " + territory_objects.mural.name + " (Serial: " + territory_objects.mural.serial + ")");
                if (DestruirObjeto(territory_objects.mural))
                    report.board_removed := 1;
                    report.objects_removed += 1;
                    LogInfo("territorio", "Mural destruído com sucesso no estágio de verificação");
                else
                    LogError("territorio", "Falha ao destruir mural no estágio de verificação");
                    report.errors.append("Falha ao destruir mural");
                endif
            endif
            
            report.cleanup_method := "tm_find_and_manual";
        else
            LogDebug("territorio", "TM_FindTerritoryObjects não encontrou objetos adicionais");
        endif
        
        // ETAPA 4: Busca pelo centro do território (método legado) como último recurso
        if (report.objects_removed < 3 && coordinates.x1 != 0 && coordinates.y1 != 0)
            LogInfo("territorio", "Iniciando busca espacial como último recurso");
            
            var center_x := CInt((coordinates.x1 + coordinates.x2) / 2);
            var center_y := CInt((coordinates.y1 + coordinates.y2) / 2);
            
            // Calcular raio adequado
            var dx := coordinates.x2 - coordinates.x1;
            var dy := coordinates.y2 - coordinates.y1;
            
            if (dx < 0) dx := -dx; endif
            if (dy < 0) dy := -dy; endif
            
            var radius := CInt((dx + dy) / 4) + 3;
            
            LogDebug("territorio", "Buscando objetos no centro do território: (" + center_x + "," + center_y + ") com raio " + radius);
            
            // Usar a nova função TM_FindObjectsInTerritory se disponível, caso contrário usar o método legado
            var all_territory_objects := array{};
            
            // Tipos de objeto a procurar
            var object_types := array{0xFF11, 0xFE5C, 0x46AE}; // Baú, Mesa, Mural
            
            foreach obj_type in object_types
                var items := ListItemsNearLocationOfType(center_x, center_y, 0, radius, obj_type, target_realm);
                if (items && TypeOf(items) == "Array")
                    all_territory_objects := all_territory_objects + items;
                endif
                sleepms(2);
            endforeach
            
            LogDebug("territorio", "Encontrados " + all_territory_objects.size() + " objetos potenciais na área");
            
            foreach item in all_territory_objects
                if (VerificarObjeto(item, territorio_id, faction))
                    LogDebug("territorio", "Objeto confirmado como pertencente ao território: " + item.name);
                    
                    if (DestruirObjeto(item))
                        report.objects_removed += 1;
                        
                        // Classificar o tipo de objeto
                        if (item.objtype == 0xFF11 && !report.chest_removed)
                            report.chest_removed := 1;
                            LogInfo("territorio", "Baú destruído com sucesso pela busca espacial");
                        elseif (item.objtype == 0xFE5C && !report.desk_removed)
                            report.desk_removed := 1;
                            LogInfo("territorio", "Mesa destruída com sucesso pela busca espacial");
                        elseif (item.objtype == 0x46AE && !report.board_removed)
                            report.board_removed := 1;
                            LogInfo("territorio", "Mural destruído com sucesso pela busca espacial");
                        endif
                        
                        report.cleanup_method := "spatial_search_fallback";
                    else
                        LogError("territorio", "Falha ao destruir objeto na busca espacial: " + item.name);
                        report.errors.append("Falha ao destruir objeto via busca espacial");
                    endif
                endif
                sleepms(2);
            endforeach
        endif
    endif
    
    // ETAPA 5: Remover registros de seriais usando TM
    LogDebug("territorio", "Removendo registros do território no datafile de seriais");
    var seriais_df := SafeOpenDataFile(":faccao:seriais", 1);
    if (seriais_df)
        var territorios_seriais := GetElementProp(seriais_df, "territorios", dictionary{});
        if (territorios_seriais && territorios_seriais.exists(territorio_id))
            territorios_seriais.erase(territorio_id);
            SetElementProp(seriais_df, "territorios", territorios_seriais);
            LogDebug("territorio", "Registro de seriais removido com sucesso");
        endif
    endif
    
    // ETAPA 6: Registrar e notificar o resultado
    // Armazenar o relatório no datafile para histórico
    var clean_df := SafeOpenDataFile(":faccao:territory_cleanups", 1);
    if (clean_df)
        var elem := SafeFindElement(clean_df, "history", 1);
        if (elem)
            var history := GetElementProp(elem, "cleanups", array{});
            
            // Adicionar timestamp e dados do executor
            report.timestamp := polcore().systime;
            report.executor := who ? struct{
                "name" := who.name,
                "account" := who.acctname,
                "serial" := who.serial
            } : struct{
                "name" := "System",
                "account" := "System",
                "serial" := 0
            };
            
            // Adicionar ao início do histórico
            history.insert(1, report);
            
            // Manter tamanho razoável
            while (history.size() > 50)
                history.erase(history.size());
            endwhile
            
            SetElementProp(elem, "cleanups", history);
            LogDebug("territorio", "Relatório de limpeza registrado no histórico");
        endif
    endif
    
    // Resumo da operação
    LogInfo("territorio", "Resumo final da operação:");
    LogInfo("territorio", "   - Território: " + territory_info.name + " (ID: " + territorio_id + ")");
    LogInfo("territorio", "   - Facção: " + faction);
    LogInfo("territorio", "   - Total de objetos removidos: " + report.objects_removed);
    LogInfo("territorio", "   - Baú removido: " + (report.chest_removed ? "Sim" : "Não"));
    LogInfo("territorio", "   - Mesa removida: " + (report.desk_removed ? "Sim" : "Não"));
    LogInfo("territorio", "   - Mural removido: " + (report.board_removed ? "Sim" : "Não"));
    LogInfo("territorio", "   - Método usado: " + report.cleanup_method);
    LogInfo("territorio", "   - Realm: " + report.realm);
    
    if (report.errors.size() > 0)
        LogWarning("territorio", "   - Erros encontrados: " + report.errors.size());
        var i;
        for (i := 1; i <= report.errors.size(); i += 1)
            LogWarning("territorio", "     * " + report.errors[i]);
        endfor
    endif
    
    // Notificar o usuário
    if (who)
        var message := "Limpeza concluída: " + report.objects_removed + " objetos removidos";
        if (report.errors.size() > 0)
            message += " com " + report.errors.size() + " erros.";
        else
            message += ".";
        endif
        
        SendSysMessage(who, message);
        LogDebug("territorio", "Mensagem enviada ao usuário: " + who.name);
    endif
    
    // Notificar o sistema sobre a mudança via TM_NotifyTerritoryChange
    TM_NotifyTerritoryChange(territorio_id, "cleanup", struct{
        "objects_removed" := report.objects_removed,
        "faction" := faction,
        "executor" := who ? who.name : "System"
    });
    
    LogInfo("territorio", "======================= FIM DA EXECUÇÃO =======================");
    
    return report.objects_removed;
endprogram

// Função para verificar se um objeto pertence ao território/facção
function VerificarObjeto(item, territorio_id, faction)
    LogDebug("territorio", "Iniciando verificação de objeto - Serial: " + item.serial);
    
    if (!item)
        LogDebug("territorio", "Item nulo, retornando false");
        return 0;
    endif
    
    // 1. Verificar pelo nome do objeto
    var name_match_territorio := (item.name.find(territorio_id) != error);
    var name_match_faction := (item.name.find(faction) != error);
    
    if (name_match_territorio || name_match_faction)
        LogDebug("territorio", "Match encontrado pelo nome, retornando true");
        return 1;
    endif
    
    // 2. Verificar pelas propriedades
    var territorio_match := 0;
    var territory_id_prop := GetObjProperty(item, TERRITORY_ID_PROP);
    var territory_id_raw := GetObjProperty(item, "TerritoryID");
    
    if (territory_id_prop == territorio_id || territory_id_raw == territorio_id)
        territorio_match := 1;
    endif
    
    // Verificar facção
    var faction_match := 0;
    var faction_prop := GetObjProperty(item, OBJ_FACTION_PROP);
    var faction_raw := GetObjProperty(item, "Faction");
    var faction_lower := GetObjProperty(item, "faction");
    
    if (faction_prop == faction || faction_raw == faction || faction_lower == faction)
        faction_match := 1;
    endif
    
    return (territorio_match || faction_match);
endfunction

// Função unificada para destruir objetos
function DestruirObjeto(item)
    if (!item)
        return 0;
    endif
    
    // Notificação visual
    PrintTextAbove(item, "*Este objeto será removido*");
    
    // Preparar para destruição
    var old_movable := item.movable;
    item.movable := 1;
    Sleep(1);
    
    // TENTATIVA 1: DestroyItem
    var destroy_result := DestroyItem(item);
    if (destroy_result)
        return 1;
    endif
    
    // TENTATIVA 2: Mover para o void
    var move_result := MoveObjectToLocation(item, 6000, 6000, 0, item.realm, MOVEOBJECT_FORCELOCATION);
    if (move_result)
        return 1;
    endif
    
    // TENTATIVA 3: Desativar completamente
    item.invisible := 1;
    item.movable := 0;
    item.graphic := 0x1;
    item.color := 0;
    item.usescript := "";
    item.name := "Objeto_Desativado_" + item.serial;
    
    return 1;
endfunction