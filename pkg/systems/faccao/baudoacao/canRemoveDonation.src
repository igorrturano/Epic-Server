use uo;
use guilds;
use datafile;

include "include/say";
include ":faccao:include/shared_functions";
include ":faccao:include/faccao_resources";
include ":faccao:faccao_constants";
include ":datafile:datafile";

program CanRemove(mobile, container, item, move_type)
    // Parâmetros que precisamos preservar mesmo que não usemos
    move_type := move_type;
    item := item;

    // Usar função padronizada CanRemoveItems que chama UnifiedCheckRemovePermission internamente
    var can_remove := CanRemoveItems(mobile, container);
    
    // Logging padronizado
    LogPermissionCheck(mobile, container, "REMOÇÃO", can_remove);
    
    if (!can_remove)
        // Mensagem personalizada dependendo da facção
        var chest_faction := GetFactionOfChest(container);
        var player_faction := GetPlayerFaction(mobile);
        
        if (chest_faction == player_faction)
            SendSysMessage(mobile, "Apenas líderes e oficiais podem remover itens do baú da facção.");
        elseif (chest_faction == KINGDOM_FACTION || chest_faction == "Reino")
            SendSysMessage(mobile, "Apenas o monarca e a Mão do Rei podem remover itens do tesouro do Reino.");
        else
            SendSysMessage(mobile, "Você não tem permissão para remover itens deste baú.");
        endif
        
        return 0;
    endif

    return 1;
endprogram

// ==========================================================================
// SISTEMA DE PERMISSÕES REVISADO PARA BAÚS DE FACÇÕES
// ==========================================================================

// ----- Principais Funções de Permissão -----

// Verifica se um jogador pode inserir itens no baú
// Mantém a compatibilidade com a chamada existente - não altera a assinatura da função


// Verifica se um jogador pode remover itens do baú
// Mantém a compatibilidade com a chamada existente - não altera a assinatura da função


function LogChestAccess(who, chest, action, success)
    // Registrar no console do servidor
    Print("ACESSO AO BAÚ: " + who.name + " [" + action + "] " + 
          (success ? "PERMITIDO" : "NEGADO") + " para baú " + chest.serial + 
          " (Facção: " + GetObjProperty(chest, OBJ_FACTION_PROP) + ")");
    
    // Opcional: registrar em um datafile para análise posterior
    var df := DFOpenDataFile(":faccao:chest_access_log");
    if (df)
        var elem := DFFindElement(df, "logs", DF_CREATE);
        
        var logs := elem.GetProp("entries");
        if (!logs)
            logs := array{};
        endif
        
        logs.append(struct{
            "timestamp" := polcore().systime,
            "player" := who.name,
            "player_serial" := who.serial,
            "player_faction" := GetPlayerFaction(who),
            "chest_serial" := chest.serial,
            "chest_faction" := GetObjProperty(chest, OBJ_FACTION_PROP),
            "action" := action,
            "success" := success
        });
        
        // Limitar o tamanho do log
        while (logs.size() > 200)
            logs.erase(1);
        endwhile
        
        elem.SetProp("entries", logs);
    endif
endfunction