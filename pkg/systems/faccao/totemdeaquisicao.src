use uo;
use os;
use datafile;

include ":faccao:faccao";
include ":faccao:faccao_constants";
include ":faccao:include/shared_functions";
include ":faccao:include/faccao_resources";
// Adicionamos o novo include
include ":faccao:include/territory_management";

program TotemDeAquisicao(who, totem)
    if (!who || !totem)
        return 0;
    endif
    
    var rect_name := GetObjProperty(totem, TERRITORY_NAME_PROP);
    if (!rect_name)
        SendSysMessage(who, "Totem inválido.");
        return 0;
    endif
    
    var territory_id := GetObjProperty(totem, TERRITORY_ID_PROP);
    if (!territory_id)
        territory_id := GetObjProperty(totem, TERRITORY_NAME_PROP); // Fallback para compatibilidade
    endif

    // Verificar se o jogador é líder de uma facção
    var guild := who.guild;
    if (!guild)
        SendSysMessage(who, "Você precisa pertencer a uma facção para reivindicar territórios.");
        return 0;
    endif
    
    var guild_obj := GetFaccao(guild);
    if (!guild_obj || guild_obj.leader != who.serial)
        SendSysMessage(who, "Apenas o líder da facção pode reivindicar territórios.");
        return 0;
    endif
    
    // Usamos TM_FindTerritory no lugar de abrir o datafile diretamente
    var territorio_elem := TM_FindTerritory(rect_name);
    if (!territorio_elem)
        SendSysMessage(who, "Território não encontrado: " + rect_name);
        return 0;
    endif
    
    // Verificar se o território já está reivindicado (verificando ambas as propriedades)
    // Usamos TM_GetTerritoryInfo para obter informações do território
    var territorio_info := TM_GetTerritoryInfo(rect_name);
    var current_faction := territorio_info.faction;

    if (current_faction && current_faction != DEFAULT_FACTION && current_faction != "Selvagem")
        SendSysMessage(who, "Este território já está reivindicado por: " + current_faction);
        return 0;
    endif
    
    // Reivindicar o território
    // Obter o nome da facção da propriedade padronizada
    var faction_name;
    if (guild)
        // Tenta obter diretamente da guilda principal
        faction_name := guild.guildname;
        if (!faction_name || faction_name == error)
            faction_name := guild.GetProp("name");
            if (!faction_name || faction_name == error)
                faction_name := "Desconhecido";
            endif
        endif
    else
        faction_name := "Desconhecido";
    endif

    // Imprime para debug
    LogDebug("faccao", "Nome da facção final: " + faction_name);
    
    // Substituímos SetElementProp por TM_SetTerritoryFaction
    TM_SetTerritoryFaction(rect_name, faction_name);
    
    // Adicionar o território à lista da facção de forma robusta
    var territories := guild.GetProp("territories");
    if (!territories || territories == error)
        territories := array{};
    endif
    
    if (!(rect_name in territories))
        territories.append(rect_name);
        guild.SetProp("territories", territories);
    endif
    
    // Criar o monumento no centro do território
    CreateTerritoryMonument(who, territorio_elem, rect_name, territory_id, totem);
    
    // Configurar timer para geração de recursos
    // Verificar se o território já tem recursos configurados
    var recursos_atuais := GetElementProp(territorio_elem, "Resources", "");
    if (!recursos_atuais)
        // Se não houver recursos configurados, usar um conjunto padrão (3 recursos)
        var default_resources := SplitWords("IronOre, couroespesso, cogumelo");
        var resource_str := "";
        for i := 1 to 3
            if (i > 1)
                resource_str += ", ";
            endif
            resource_str += default_resources[i];
        endfor
        
        // Aqui utilizamos TM_UpdateTerritoryResources para configurar os recursos
        TM_UpdateTerritoryResources(rect_name, resource_str, 2, 5);
    else
        // Atualizar apenas o próximo tempo de geração se já existem recursos
        var interval := CInt(GetElementProp(territorio_elem, "ResourceInterval", 2));
        var next_time := polcore().systime + (interval * 60); // Converter minutos para segundos
        SetElementProp(territorio_elem, "NextResourceTime", next_time);
    endif
    
    // Destruir o totem após uso
    DestroyItem(totem);
    
    SendSysMessage(who, "Sua facção reivindicou com sucesso o território: " + rect_name);
    SendSysMessage(who, "O território começará a produzir recursos em breve.");
    PrintTextAbove(who, "*" + who.name + " reivindica este território em nome de " + faction_name + "*");
    
    return 1;
endprogram

function CreateTerritoryMonument(who, elem, rect_name, territory_id, totem)
    var rect := GetElementProp(elem, TERRITORY_RECT_PROP, "");
    var realm := GetElementProp(elem, TERRITORY_REALM_PROP, "");
    var coords := SplitWords(rect);
    
    // Obter o ID do território
    if (!territory_id)
        // Gerar um ID único para o território
        territory_id := "TER_" + CStr(polcore().systime);
        SetElementProp(elem, TERRITORY_ID_PROP, territory_id);
    endif
    
    if (coords.size() >= 4)
        var x1 := CInt(coords[1]);
        var y1 := CInt(coords[2]);
        var x2 := CInt(coords[3]);
        var y2 := CInt(coords[4]);
        
        // Usar TM_GetTerritoryCenter para obter o centro do território
        var center := TM_GetTerritoryCenter(rect_name);
        var center_x := center.x;
        var center_y := center.y;
        var center_z := center.z;
        
        var faction_name := who.guild.GetProp("name");
        if (!faction_name || faction_name == error)
            faction_name := who.guild.guildname;
        endif
        
        // Datafile para armazenar seriais
        var seriais_df := OpenDataFile(":faccao:seriais");
        if (!seriais_df)
            seriais_df := SafeOpenDataFile(":faccao:seriais", 1);
        endif
        
        // Criar o mural de recrutamento à esquerda
        var monument := CreateItemAtLocation(center_x - 1, center_y, center_z, 0x46AE, 1, realm);
        if (monument)
            // Configurar propriedades do mural
            SetObjProperty(monument, TERRITORY_NAME_PROP, rect_name);
            SetObjProperty(monument, TERRITORY_ID_PROP, territory_id);
            SetObjProperty(monument, OBJ_FACTION_PROP, faction_name);
            
            // Novo ID único, usando a função TM_CreateUniqueItemID
            var unique_id := TM_CreateUniqueItemID(faction_name, ITEM_TYPE_MURAL, territory_id);
            SetObjProperty(monument, UNIQUE_ID_PROP, unique_id);
            
            monument.name := "Mural de Recrutamento [" + faction_name + "] - " + territory_id;
            SetObjProperty(monument, "CreatedBy", who.serial);
            SetObjProperty(monument, "CreationDate", polcore().systime);
            monument.movable := 0;
            
            // Configurar script de uso
            monument.usescript := ":faccao:faccao";
            
            // Registrar o serial do mural
            seriais_df.SetProp("ultimo_mural", monument.serial);
            
            // Criar o baú de doações específico para esta facção
            var donation_chest := CreateItemAtLocation(center_x, center_y, center_z, 0xff11, 1, realm);
            if (donation_chest)
                // Configurar propriedades do baú
                var unique_id_bau := TM_CreateUniqueItemID(faction_name, ITEM_TYPE_BAU, territory_id);
                SetObjProperty(donation_chest, UNIQUE_ID_PROP, unique_id_bau);
                
                donation_chest.name := "Baú de Doações [" + faction_name + "] - " + territory_id;
                SetObjProperty(donation_chest, OBJ_FACTION_PROP, faction_name);
                SetObjProperty(donation_chest, TERRITORY_ID_PROP, territory_id);
                SetObjProperty(donation_chest, CHEST_ID_PROP, faction_name + "_" + territory_id);
                donation_chest.movable := 0;
                
                // Configurar scripts do baú
                donation_chest.usescript := ":faccao:baudoacao/use";
                SetObjProperty(donation_chest, "OnInsertScript", ":faccao:baudoacao/onInsert");
                SetObjProperty(donation_chest, "OnRemoveScript", ":faccao:baudoacao/onRemove");
                SetObjProperty(donation_chest, "CanInsertScript", ":faccao:baudoacao/canInsert");
                SetObjProperty(donation_chest, "CanRemoveScript", ":faccao:baudoacao/canRemoveDonation");
                
                // Registrar o serial do baú
                seriais_df.SetProp("ultimo_bau", donation_chest.serial);
                
                // Registrar o baú na facção
                var guild := who.guild;
                guild.SetProp(GUILD_CHEST_PROP, donation_chest.serial);
                
                // Criar a mesa de gestão à direita
                var interface_item := CreateItemAtLocation(center_x + 1, center_y, center_z, 0xFE5C, 1, realm);
                if (interface_item)
                    // Configurar propriedades da mesa
                    var unique_id_mesa := TM_CreateUniqueItemID(faction_name, ITEM_TYPE_MESA, territory_id);
                    SetObjProperty(interface_item, UNIQUE_ID_PROP, unique_id_mesa);
                    
                    interface_item.name := "Mesa de Gestão [" + faction_name + "] - " + territory_id;
                    SetObjProperty(interface_item, OBJ_FACTION_PROP, faction_name);
                    SetObjProperty(interface_item, TERRITORY_ID_PROP, territory_id);
                    interface_item.movable := 0;
                    
                    // Configurar script da mesa
                    interface_item.usescript := ":faccao:gestao_use";
                    
                    // Registrar o serial da mesa
                    seriais_df.SetProp("ultima_mesa", interface_item.serial);
                    
                    // Registrar associação com território usando TM_RegisterTerritoryObjects
                    var object_serials := struct{
                        "bau" := donation_chest.serial,
                        "mesa" := interface_item.serial,
                        "mural" := monument.serial,
                        "faction" := faction_name,
                        "coords" := rect,
                        "realm" := realm
                    };
                    
                    TM_RegisterTerritoryObjects(territory_id, object_serials);
                    
                    SendSysMessage(who, "Monumento de território criado com sucesso. Recursos serão entregues no baú de doações.");
                else
                    SendSysMessage(who, "Falha ao criar a mesa de gestão. Por favor, notifique um GM.");
                endif
            else
                SendSysMessage(who, "Falha ao criar o baú de doações. Por favor, notifique um GM.");
            endif
            
            return monument;
        endif
    endif
    
    return 0;
endfunction