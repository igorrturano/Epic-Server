use uo;
use os;
use polsys;
use util;

include "include/client";
include "include/say";
include ":gumps:include/epicGumps";
include ":tn:boss";

// Constants for button IDs and menu pages
const BOTAO_PAGE1 := 1;
const BOTAO_PAGE2 := 2;
const BOTAO_PAGE3 := 3;
const BOTAO_PAGE4 := 4;
const BOTAO_PAGE5 := 5;

const MENU_PAGE1 := 1;
const MENU_PAGE2 := 2;
const MENU_PAGE3 := 3;
const MENU_PAGE4 := 4;
const MENU_PAGE5 := 5;

// Track which button was last clicked
var button_states := array{1, 0, 0, 0, 0};
var last_clicked_button := BOTAO_PAGE1;

program epicBOSS(who)
    // Create a gump with title "EPIC BOSS"
    var gump_width := 1200;
    var gump_height := 800;
    var title := "EPIC BOSS";
    
    // Show the first page initially
    var input := ShowPage1(who, title, gump_width, gump_height);
    
    // Process user input until they close the gump
    while (input[0] != 0)
        // Check if the Create Boss button was clicked
        if (input[0] == 100)
            CreateBossFromGump(who, input);
            break; // Exit after creating the boss
        endif
        
        var new_menu := UpdateMenuState(input[0]);
        case (new_menu)
            MENU_PAGE1: 
                input := ShowPage1(who, title, gump_width, gump_height);
            MENU_PAGE2: 
                input := ShowPage2(who, title, gump_width, gump_height);
            MENU_PAGE3:
                input := ShowPage3(who, title, gump_width, gump_height);
            MENU_PAGE4: 
                input := ShowPage4(who, title, gump_width, gump_height);
            MENU_PAGE5:
                input := ShowPage5(who, title, gump_width, gump_height);
        endcase
    endwhile
    
    return 1;
endprogram

// Function to update which menu is active based on button click
function UpdateMenuState(input)
    last_clicked_button := input;
    case (input)
        BOTAO_PAGE1:
            button_states := array{1, 0, 0, 0, 0};
            return MENU_PAGE1;
        BOTAO_PAGE2:
            button_states := array{0, 1, 0, 0, 0};
            return MENU_PAGE2;
        BOTAO_PAGE3:
            button_states := array{0, 0, 1, 0, 0};
            return MENU_PAGE3;
        BOTAO_PAGE4:
            button_states := array{0, 0, 0, 1, 0};
            return MENU_PAGE4;
        BOTAO_PAGE5:
            button_states := array{0, 0, 0, 0, 1};
            return MENU_PAGE5;
    endcase

    // Default to page 1 if no valid input
    button_states := array{1, 0, 0, 0, 0};
    return MENU_PAGE1;
endfunction

// Function to add navigation buttons at the top of the gump
function AddNavigationButtons(byref gump, gump_width)
    var titles := array{
        "BASIC INFO",      // Basic boss information
        "ATTRIBUTES",      // Stats, skills, resistances
        "ABILITIES",       // Special abilities and combat events
        "BEHAVIOR",        // Patrol areas, conditions, AI settings
        "EQUIPMENT"        // Weapons, armor, and loot
    };
    var x_positions := array{150, 350, 550, 750, 950};
    var buttons := array{BOTAO_PAGE1, BOTAO_PAGE2, BOTAO_PAGE3, BOTAO_PAGE4, BOTAO_PAGE5};
    
    // Create a background for the navigation bar
    GFResizePic(gump, 45, 80, 9350, gump_width - 90, 40);
    
    // Add each button with appropriate styling
    for i := 1 to titles.size()
        var gump_button := 2151; // Normal button
        var text_color := 53;    // Normal text color
        
        if (buttons[i] == last_clicked_button)
            gump_button := 2153; // Active button
            text_color := 230;   // Active text color
        endif
        
        // Add the text and button
        GFTextLine(gump, x_positions[i], 90, text_color, titles[i]);
        GFAddButton(gump, x_positions[i] - 35, 85, gump_button, gump_button, 1, buttons[i]);
    endfor
endfunction

// Functions for each page
function ShowPage1(who, title, gump_width, gump_height)
    var gump := GFECreateGump(title, gump_width, gump_height);
    
    // Add navigation buttons
    AddNavigationButtons(gump, gump_width);
    
    // Page 1 content - BASIC INFO
    GFTextMid(gump, 0, 150, gump_width, 1153, "BASIC INFORMATION");
    
    // NPC Template selection
    GFTextLine(gump, 50, 200, 1153, "NPC Template:");
    GFTextEntry(gump, 200, 200, 300, 20, 1150, ":brainai:", 1);
    
    // Boss Name
    GFTextLine(gump, 50, 230, 1153, "Boss Name:");
    GFTextEntry(gump, 200, 230, 300, 20, 1150, "", 2);
    
    // Color
    GFTextLine(gump, 50, 260, 1153, "Color:");
    GFTextEntry(gump, 200, 260, 100, 20, 1150, "0", 3);
    
    // Description
    GFTextLine(gump, 50, 290, 1153, "Description:");
    GFTextEntry(gump, 200, 290, 400, 60, 1150, "", 4);
    
    // True Boss checkbox
    GFCheckBox(gump, 50, 360, 2510, 2511, 0, 5);
    GFTextLine(gump, 80, 360, 1153, "True Boss");
    
    // Special AI
    GFTextLine(gump, 50, 390, 1153, "Special AI:");
    GFTextEntry(gump, 200, 390, 300, 20, 1150, "", 6);
    
    // NPC Profile Section
    GFTextMid(gump, 0, 430, gump_width, 1153, "NPC PROFILE");
    
    // URL for image
    GFTextLine(gump, 50, 460, 1153, "Image URL (200x200):");
    GFTextEntry(gump, 200, 460, 400, 20, 1150, "", 7);
    
    // Detailed Description
    GFTextLine(gump, 50, 490, 1153, "Detailed Description:");
    GFTextEntry(gump, 200, 490, 400, 100, 1150, "", 8);
    
    // Add Create Boss button at the bottom
    GFAddButton(gump, gump_width/2 - 80, gump_height - 50, 2128, 2129, 1, 100);
    GFTextLine(gump, gump_width/2 - 40, gump_height - 45, 1153, "CREATE BOSS");
    
    // Send the gump to the player
    var input := GFSendGump(who, gump);
    return input;
endfunction

function ShowPage2(who, title, gump_width, gump_height)
    var gump := GFECreateGump(title, gump_width, gump_height);
    
    // Add navigation buttons
    AddNavigationButtons(gump, gump_width);
    
    // Page 2 content - ATTRIBUTES
    GFTextMid(gump, 0, 150, gump_width, 1153, "ATTRIBUTES & STATS");
    
    // Stats section
    GFTextMid(gump, 0, 180, gump_width, 1153, "Base Stats");
    
    // Strength
    GFTextLine(gump, 50, 210, 1153, "Strength Modifier:");
    GFTextEntry(gump, 200, 210, 100, 20, 1150, "0", 10);
    
    // Dexterity
    GFTextLine(gump, 50, 240, 1153, "Dexterity Modifier:");
    GFTextEntry(gump, 200, 240, 100, 20, 1150, "0", 11);
    
    // Intelligence
    GFTextLine(gump, 50, 270, 1153, "Intelligence Modifier:");
    GFTextEntry(gump, 200, 270, 100, 20, 1150, "0", 12);
    
    // Hits
    GFTextLine(gump, 50, 300, 1153, "Hits Modifier:");
    GFTextEntry(gump, 200, 300, 100, 20, 1150, "0", 13);
    
    // Damage Modifier
    GFTextLine(gump, 50, 330, 1153, "Damage Modifier (0.1-1.0):");
    GFTextEntry(gump, 250, 330, 100, 20, 1150, "0", 14);
    
    // Resistances section
    GFTextMid(gump, 0, 370, gump_width, 1153, "Resistances");
    
    // Physical
    GFTextLine(gump, 600, 210, 1153, "Physical:");
    GFTextEntry(gump, 700, 210, 100, 20, 1150, "0", 15);
    
    // Fire
    GFTextLine(gump, 600, 240, 1153, "Fire:");
    GFTextEntry(gump, 700, 240, 100, 20, 1150, "0", 16);
    
    // Cold
    GFTextLine(gump, 600, 270, 1153, "Cold:");
    GFTextEntry(gump, 700, 270, 100, 20, 1150, "0", 17);
    
    // Energy
    GFTextLine(gump, 600, 300, 1153, "Energy:");
    GFTextEntry(gump, 700, 300, 100, 20, 1150, "0", 18);
    
    // Poison
    GFTextLine(gump, 600, 330, 1153, "Poison:");
    GFTextEntry(gump, 700, 330, 100, 20, 1150, "0", 19);
    
    // Skills section
    GFTextMid(gump, 0, 400, gump_width, 1153, "Skills");
    
    // Wrestling
    GFTextLine(gump, 50, 430, 1153, "Wrestling Modifier:");
    GFTextEntry(gump, 200, 430, 100, 20, 1150, "0", 20);
    
    // Tactics
    GFTextLine(gump, 50, 460, 1153, "Tactics Modifier:");
    GFTextEntry(gump, 200, 460, 100, 20, 1150, "0", 21);
    
    // Magery
    GFTextLine(gump, 50, 490, 1153, "Magery Modifier:");
    GFTextEntry(gump, 200, 490, 100, 20, 1150, "0", 22);
    
    // Awareness
    GFTextLine(gump, 50, 520, 1153, "Awareness Modifier:");
    GFTextEntry(gump, 200, 520, 100, 20, 1150, "0", 23);
    
    // Add Create Boss button at the bottom
    GFAddButton(gump, gump_width/2 - 80, gump_height - 50, 2128, 2129, 1, 100);
    GFTextLine(gump, gump_width/2 - 40, gump_height - 45, 1153, "CREATE BOSS");
    
    // Send the gump to the player
    var input := GFSendGump(who, gump);
    return input;
endfunction

function ShowPage3(who, title, gump_width, gump_height)
    var gump := GFECreateGump(title, gump_width, gump_height);
    
    // Add navigation buttons
    AddNavigationButtons(gump, gump_width);
    
    // Page 3 content - ABILITIES
    GFTextMid(gump, 0, 150, gump_width, 1153, "SPECIAL ABILITIES");
    
    // Special Abilities section
    GFTextLine(gump, 50, 180, 1153, "Special Abilities:");
    GFAddButton(gump, 250, 180, 2103, 2104, 1, 30);
    GFTextLine(gump, 280, 180, 1153, "Add Special Ability");
    
    // List of available abilities
    GFTextLine(gump, 50, 210, 1153, "Available Abilities:");
    GFTextLine(gump, 80, 230, 1153, "- Ice Hit");
    GFTextLine(gump, 80, 250, 1153, "- Fire Hit");
    GFTextLine(gump, 80, 270, 1153, "- Energy Hit");
    GFTextLine(gump, 80, 290, 1153, "- Life Drain");
    GFTextLine(gump, 80, 310, 1153, "- Damage Return");
    GFTextLine(gump, 80, 330, 1153, "- Custom Hit Script");
    
    // Combat Events section
    GFTextLine(gump, 600, 180, 1153, "Combat Events:");
    GFAddButton(gump, 800, 180, 2103, 2104, 1, 40);
    GFTextLine(gump, 830, 180, 1153, "Add Combat Event");
    
    // TimedScripts section
    GFTextLine(gump, 50, 370, 1153, "TimedScripts:");
    GFAddButton(gump, 250, 370, 2103, 2104, 1, 50);
    GFTextLine(gump, 280, 370, 1153, "Add TimedScript");
    
    // List of available timedscripts
    GFTextLine(gump, 80, 400, 1153, "- Poison");
    GFTextLine(gump, 80, 420, 1153, "- Paralysis");
    GFTextLine(gump, 80, 440, 1153, "- Clumsy");
    GFTextLine(gump, 80, 460, 1153, "- Weaken");
    GFTextLine(gump, 80, 480, 1153, "- Bleed");
    
    // Death Events section
    GFTextLine(gump, 600, 370, 1153, "Death Events:");
    GFAddButton(gump, 800, 370, 2103, 2104, 1, 60);
    GFTextLine(gump, 830, 370, 1153, "Add Death Event");
    
    // Add Create Boss button at the bottom
    GFAddButton(gump, gump_width/2 - 80, gump_height - 50, 2128, 2129, 1, 100);
    GFTextLine(gump, gump_width/2 - 40, gump_height - 45, 1153, "CREATE BOSS");
    
    // Send the gump to the player
    var input := GFSendGump(who, gump);
    return input;
endfunction

function ShowPage4(who, title, gump_width, gump_height)
    var gump := GFECreateGump(title, gump_width, gump_height);
    
    // Add navigation buttons
    AddNavigationButtons(gump, gump_width);
    
    // Page 4 content - BEHAVIOR
    GFTextMid(gump, 0, 150, gump_width, 1153, "BEHAVIOR & MOVEMENT");
    
    // Patrol Areas section
    GFTextLine(gump, 50, 180, 1153, "Patrol Areas:");
    GFAddButton(gump, 250, 180, 2103, 2104, 1, 70);
    GFTextLine(gump, 280, 180, 1153, "Set Patrol Location 1");
    
    GFAddButton(gump, 250, 210, 2103, 2104, 1, 71);
    GFTextLine(gump, 280, 210, 1153, "Set Patrol Location 2");
    
    // Teleport Conditions section
    GFTextLine(gump, 50, 250, 1153, "Teleport When Health Below:");
    GFTextEntry(gump, 250, 250, 100, 20, 1150, "25", 72);
    GFTextLine(gump, 360, 250, 1153, "%");
    
    GFAddButton(gump, 250, 280, 2103, 2104, 1, 73);
    GFTextLine(gump, 280, 280, 1153, "Set Teleport Location");
    
    // Ability Conditions section
    GFTextLine(gump, 50, 320, 1153, "Ability Conditions:");
    GFAddButton(gump, 250, 320, 2103, 2104, 1, 74);
    GFTextLine(gump, 280, 320, 1153, "Add Ability Condition");
    
    // Examples of conditions
    GFTextLine(gump, 80, 350, 1153, "Examples:");
    GFTextLine(gump, 80, 370, 1153, "- Use ability when health below X%");
    GFTextLine(gump, 80, 390, 1153, "- Use ability when X players are nearby");
    GFTextLine(gump, 80, 410, 1153, "- Use ability every X seconds");
    
    // AI Settings section
    GFTextLine(gump, 600, 180, 1153, "AI Settings:");
    
    // Aggression Level
    GFTextLine(gump, 600, 210, 1153, "Aggression Level:");
    GFAddButton(gump, 730, 210, 2103, 2104, 1, 75);
    GFTextLine(gump, 760, 210, 1153, "High");
    
    // Flee Level
    GFTextLine(gump, 600, 240, 1153, "Flee When Health Below:");
    GFTextEntry(gump, 780, 240, 100, 20, 1150, "10", 76);
    GFTextLine(gump, 890, 240, 1153, "%");
    
    // Target Selection
    GFTextLine(gump, 600, 270, 1153, "Target Selection:");
    GFAddButton(gump, 730, 270, 2103, 2104, 1, 77);
    GFTextLine(gump, 760, 270, 1153, "Highest Damage");
    
    // Add Create Boss button at the bottom
    GFAddButton(gump, gump_width/2 - 80, gump_height - 50, 2128, 2129, 1, 100);
    GFTextLine(gump, gump_width/2 - 40, gump_height - 45, 1153, "CREATE BOSS");
    
    // Send the gump to the player
    var input := GFSendGump(who, gump);
    return input;
endfunction

function ShowPage5(who, title, gump_width, gump_height)
    var gump := GFECreateGump(title, gump_width, gump_height);
    
    // Add navigation buttons
    AddNavigationButtons(gump, gump_width);
    
    // Page 5 content - EQUIPMENT
    GFTextMid(gump, 0, 150, gump_width, 1153, "EQUIPMENT & LOOT");
    
    // Weapon Selection section
    GFTextLine(gump, 50, 180, 1153, "Weapon Type:");
    
    // Weapon type radio buttons
    GFAddButton(gump, 50, 210, 2151, 2153, 1, 80);
    GFTextLine(gump, 80, 210, 1153, "Dual Wield");
    
    GFAddButton(gump, 50, 240, 2151, 2153, 1, 81);
    GFTextLine(gump, 80, 240, 1153, "One-Handed");
    
    GFAddButton(gump, 50, 270, 2151, 2153, 1, 82);
    GFTextLine(gump, 80, 270, 1153, "Two-Handed");
    
    GFAddButton(gump, 50, 300, 2151, 2153, 1, 83);
    GFTextLine(gump, 80, 300, 1153, "Ranged");
    
    // Specific weapon
    GFTextLine(gump, 50, 340, 1153, "Specific Weapon (ID or Name):");
    GFTextEntry(gump, 250, 340, 200, 20, 1150, "", 84);
    
    // Class Selection (for humanoid)
    GFTextLine(gump, 50, 380, 1153, "Class (for Humanoid):");
    
    // Class type radio buttons
    GFAddButton(gump, 50, 410, 2151, 2153, 1, 85);
    GFTextLine(gump, 80, 410, 1153, "Warrior");
    
    GFAddButton(gump, 50, 440, 2151, 2153, 1, 86);
    GFTextLine(gump, 80, 440, 1153, "Mage");
    
    GFAddButton(gump, 50, 470, 2151, 2153, 1, 87);
    GFTextLine(gump, 80, 470, 1153, "Ranger");
    
    // Magic School (for mage)
    GFTextLine(gump, 50, 510, 1153, "Magic School:");
    GFTextEntry(gump, 250, 510, 200, 20, 1150, "", 88);
    
    // Loot section
    GFTextLine(gump, 600, 180, 1153, "Loot Items:");
    GFAddButton(gump, 800, 180, 2103, 2104, 1, 90);
    GFTextLine(gump, 830, 180, 1153, "Add Loot Item");
    
    // Loot chance
    GFTextLine(gump, 600, 210, 1153, "Default Drop Chance (%):");
    GFTextEntry(gump, 800, 210, 100, 20, 1150, "25", 91);
    
    // Add Create Boss button at the bottom
    GFAddButton(gump, gump_width/2 - 80, gump_height - 50, 2128, 2129, 1, 100);
    GFTextLine(gump, gump_width/2 - 40, gump_height - 45, 1153, "CREATE BOSS");
    
    // Send the gump to the player
    var input := GFSendGump(who, gump);
    return input;
endfunction

// Add a function to create the boss from gump data
function CreateBossFromGump(who, input)
    // Create a boss structure
    var boss := struct{};
    
    // Initialize arrays
    boss.special := array{};
    boss.loot := array{};
    boss.deathevent := array{};
    
    // Basic info
    boss.npctemplate := GFExtractData(input, 1);
    boss.name := GFExtractData(input, 2);
    boss.color := CInt(GFExtractData(input, 3));
    boss.description := GFExtractData(input, 4);
    boss.trueboss := input[5];
    
    // Special AI
    var special_ai := GFExtractData(input, 6);
    if (special_ai != "")
        var ai_spec := struct{};
        ai_spec.name := "Special AI";
        ai_spec.ai := special_ai;
        boss.special.append(ai_spec);
    endif
    
    // NPC Profile
    boss.url := GFExtractData(input, 7);
    boss.detailed_description := GFExtractData(input, 8);
    
    // Attributes
    boss.str := CInt(GFExtractData(input, 10));
    boss.dex := CInt(GFExtractData(input, 11));
    boss.int := CInt(GFExtractData(input, 12));
    boss.hits := CInt(GFExtractData(input, 13));
    boss.dmg := CDbl(GFExtractData(input, 14));
    
    // Resistances
    boss.phresist := CInt(GFExtractData(input, 15));
    boss.firesist := CInt(GFExtractData(input, 16));
    boss.coresist := CInt(GFExtractData(input, 17));
    boss.enresist := CInt(GFExtractData(input, 18));
    boss.poresist := CInt(GFExtractData(input, 19));
    
    // Skills
    boss.wrestling := CInt(GFExtractData(input, 20));
    boss.tactics := CInt(GFExtractData(input, 21));
    boss.magery := CInt(GFExtractData(input, 22));
    boss.awareness := CInt(GFExtractData(input, 23));
    
    SendSysMessage(who, "Creating boss...");
    
    var npc := CreateBoss(boss, who.x, who.y, who.z, who.realm);
    if (npc == error)
        SendSysMessage(who, "Error creating boss: " + npc.errortext);
        return 0;
    endif
    
    // Set the profile properties
    if (boss.url != "")
        SetObjProperty(npc, "url", boss.url);
    endif
    
    if (boss.detailed_description != "")
        SetObjProperty(npc, "descricao", boss.detailed_description);
    endif
    
    SendSysMessage(who, "Boss created successfully!");
    return 1;
endfunction
