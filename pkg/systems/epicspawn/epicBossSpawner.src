use uo;
use os;
include ":attributes:attributes";
include ":gumps:gumps";
include ":gumps:yesNo";
include ":gumps:requestGump";
include ":gumps:gumps_ex";
include ":gumps:epicGumps";
include ":epicspawn:epicBoss";

program use_epicBossSpawner(who, spawner)
    if (who.cmdlevel < 2)
        SendSysMessage(who, "You don't have permission to use this.");
        return;
    endif
    
    // Create a simple gump for the epic boss spawner
    var gump := GFCreateGump();
    GFResizePic(gump, 0, 0, 9350, 400, 400);
    GFTextMid(gump, 0, 20, 400, 1153, "EPIC BOSS SPAWNER");
    
    // Load properties
    var bossTemplate := GetObjProperty(spawner, "BossTemplate");
    var bossStruct := GetObjProperty(spawner, "BossStruct");
    var minDelay := GetObjProperty(spawner, "MinDelay");
    var maxDelay := GetObjProperty(spawner, "MaxDelay");
    var range := GetObjProperty(spawner, "Range");
    
    // Default values
    bossTemplate := bossTemplate ? bossTemplate : "NONE";
    minDelay := minDelay ? minDelay : 60;
    maxDelay := maxDelay ? maxDelay : 120;
    range := range ? range : 5;
    
    // Add labels and input fields
    GFTextLine(gump, 50, 60, 1153, "Boss Template:");
    GFTextEntry(gump, 150, 60, 200, 20, 1150, bossTemplate, 1);
    
    GFTextLine(gump, 50, 90, 1153, "Min Respawn (minutes):");
    GFTextEntry(gump, 200, 90, 100, 20, 1150, minDelay, 2);
    
    GFTextLine(gump, 50, 120, 1153, "Max Respawn (minutes):");
    GFTextEntry(gump, 200, 120, 100, 20, 1150, maxDelay, 3);
    
    GFTextLine(gump, 50, 150, 1153, "Spawn Range:");
    GFTextEntry(gump, 150, 150, 100, 20, 1150, range, 4);
    
    // Add buttons
    GFAddButton(gump, 150, 200, 2128, 2129, GF_CLOSE_BTN, 100); // Save button
    GFTextLine(gump, 190, 200, 1153, "Save Settings");
    
    GFAddButton(gump, 150, 240, 2128, 2129, GF_CLOSE_BTN, 101); // Test spawn button
    GFTextLine(gump, 190, 240, 1153, "Test Spawn");
    
    GFAddButton(gump, 150, 280, 2128, 2129, GF_CLOSE_BTN, 102); // Reset button
    GFTextLine(gump, 190, 280, 1153, "Reset Spawner");
    
    // Display the gump
    var input := GFSendGump(who, gump);
    
    // Process input
    if (input[0] == 100) // Save button
        SaveSettings(who, spawner, input);
    elseif (input[0] == 101) // Test spawn button
        TestSpawn(who, spawner);
    elseif (input[0] == 102) // Reset button
        ResetSpawner(who, spawner);
    endif
    
    spawner.invisible := 1;
endprogram

function SaveSettings(who, spawner, input)
    var bossTemplate := GFExtractData(input, 1);
    var minDelay := CInt(GFExtractData(input, 2));
    var maxDelay := CInt(GFExtractData(input, 3));
    var range := CInt(GFExtractData(input, 4));
    
    // Validate and set properties
    if (bossTemplate && bossTemplate != "")
        SetObjProperty(spawner, "BossTemplate", bossTemplate);
    endif
    
    if (minDelay > 0)
        SetObjProperty(spawner, "MinDelay", minDelay);
    endif
    
    if (maxDelay > 0)
        SetObjProperty(spawner, "MaxDelay", maxDelay);
    endif
    
    if (range >= 0)
        SetObjProperty(spawner, "Range", range);
    endif
    
    // Set the boss struct if it was created from the epicBoss gump
    var bossStruct := GetObjProperty(spawner, "BossStruct");
    if (!bossStruct)
        // If no boss struct, use the template directly
        SetObjProperty(spawner, "BossTemplate", bossTemplate);
    endif
    
    // Reset the spawner to apply changes
    SetObjProperty(spawner, "ResetMe", 1);
    
    SendSysMessage(who, "Epic Boss Spawner settings saved successfully!");
endfunction

function TestSpawn(who, spawner)
    // Kill any existing boss
    var childSerial := GetObjProperty(spawner, "ChildSerial");
    if (childSerial && childSerial != "Empty")
        var boss := SystemFindObjectBySerial(childSerial);
        if (boss && !boss.master)
            SetObjProperty(boss, "summoned", 1);
            SetObjProperty(boss, "spawnkill", 1);
            RevokePrivilege(boss, "invul");
            ApplyRawDamage(boss, GetVital(boss, HITS) + 3);
        endif
    endif
    
    // Spawn a new boss for testing
    var bossTemplate := GetObjProperty(spawner, "BossTemplate");
    var bossStruct := GetObjProperty(spawner, "BossStruct");
    var boss;
    
    if (bossStruct)
        boss := CreateEpicBoss(bossStruct, who.x, who.y, who.z, who.realm);
    else
        boss := CreateNpcFromTemplate(bossTemplate, who.x, who.y, who.z, 0, who.realm);
    endif
    
    if (boss && boss != error)
        SetObjProperty(boss, "epicspawner", spawner.serial);
        SetObjProperty(spawner, "ChildSerial", boss.serial);
        SetObjProperty(spawner, "SpawnQueue", "Active");
        SendSysMessage(who, "Test boss spawned successfully!");
    else
        SendSysMessage(who, "Failed to spawn test boss. Check the template or boss structure.");
    endif
endfunction

function ResetSpawner(who, spawner)
    SetObjProperty(spawner, "ResetMe", 1);
    SendSysMessage(who, "Epic Boss Spawner has been reset.");
endfunction 