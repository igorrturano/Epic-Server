use uo;
use os;
use util;

include "include/client";
include ":attributes:attributes";
include ":combat:combat";
include ":damage:damage";

program SpecialAttack_Cleave(params)
	var attacker := params[1];
	var defender := params[2];
	var weapon := params[3];
	var damage := params[4];
	
	// Base damage multiplier for cleave
	var damageMultiplier := 0.7;
	
	// Find all potential targets in range (within 1 tile)
	var potentialTargets := ListMobilesNearLocation(attacker.x, attacker.y, attacker.z, 1, attacker.realm);
	var hitTargets := array{};
	
	// Calculate attacker's facing direction
	var facing := attacker.facing;
	
	// Add the primary target
	if (defender)
		hitTargets.append(defender);
	endif
	
	// Check each potential target to see if they're in the 90-degree arc
	foreach mobile in potentialTargets
		// Skip the attacker
		if (mobile.serial == attacker.serial)
			continue;
		endif
		
		// Skip the primary target (already added)
		if (defender && mobile.serial == defender.serial)
			continue;
		endif
		
		// Skip non-attackable targets
		if (!CanAttack(attacker, mobile))
			continue;
		endif
		
		// Calculate angle to target
		var dx := mobile.x - attacker.x;
		var dy := mobile.y - attacker.y;
		var angle := GetFacingAngle(dx, dy);
		
		// Check if target is within the 90-degree arc of attacker's facing
		if (IsInFacingArc(facing, angle, 45))
			hitTargets.append(mobile);
		endif
		
		// Limit to max 3 targets total (including primary target)
		if (hitTargets.size() >= 3)
			break;
		endif
	endforeach
	
	// Play effect on attacker
	PlayObjectCenteredEffect(attacker, 0x3728, 10, 10);
	PlaySoundEffect(attacker, 0x520);
	
	// Apply damage to all hit targets
	foreach mobile in hitTargets
		var targetDamage := damage * damageMultiplier;
		
		// Reduce damage for secondary targets
		if (defender && mobile.serial != defender.serial)
			targetDamage := targetDamage * 0.75;
		endif
		
		ApplyRawDamage(mobile, CInt(targetDamage));
		
		// Show special effect on the target
		PlayObjectCenteredEffect(mobile, 0x37B9, 10, 10);
		
		// Send hit message
		SendSysMessage(attacker, "Your cleave strikes "+mobile.name+"!");
		SendSysMessage(mobile, attacker.name+" cleaves you with a powerful strike!");
	endforeach
	
	return 1;
endprogram

function GetFacingAngle(dx, dy)
	var angle := ATan2(dy, dx) * 57.2958; // Convert to degrees
	if (angle < 0)
		angle += 360;
	endif
	return angle;
endfunction

function IsInFacingArc(facing, targetAngle, arcSize)
	var facingAngle := ConvertFacingToAngle(facing);
	var minAngle := facingAngle - arcSize;
	var maxAngle := facingAngle + arcSize;
	
	if (minAngle < 0)
		minAngle += 360;
	endif
	
	if (maxAngle >= 360)
		maxAngle -= 360;
	endif
	
	if (minAngle <= maxAngle)
		return (targetAngle >= minAngle && targetAngle <= maxAngle);
	else
		return (targetAngle >= minAngle || targetAngle <= maxAngle);
	endif
endfunction

function ConvertFacingToAngle(facing)
	case (facing)
		0: return 0;   // North
		1: return 45;  // Northeast
		2: return 90;  // East
		3: return 135; // Southeast
		4: return 180; // South
		5: return 225; // Southwest
		6: return 270; // West
		7: return 315; // Northwest
		default: return 0;
	endcase
endfunction