use uo;
use os;

include ":loot:lootParser";
include ":traps:traps";
include ":chestspawn:treasurechest"; // Assuming this contains CreateTreasureChests

program EpicChestSpawner(spawner)
    var level           := GetObjProperty(spawner, "epic_level");
    var amount          := GetObjProperty(spawner, "epic_amount");
    var range_val       := GetObjProperty(spawner, "epic_range");
    var chest_type      := GetObjProperty(spawner, "epic_chest_type");
    var is_mimic        := GetObjProperty(spawner, "epic_is_mimic");
    var mimic_chance    := GetObjProperty(spawner, "epic_mimic_chance");
    var is_puzzle       := GetObjProperty(spawner, "epic_is_puzzle");
    var puzzle_limit_count := GetObjProperty(spawner, "epic_puzzle_limit_count"); // Renamed from limit_puzzle
    var frq := GetObjProperty(spawner, "duration"); // Duration in seconds
    
    if (!frq)
        frq := 1800; // Default to 30 min if not set
        SetObjProperty(spawner, "duration", frq);
    endif

    // Initial delay
    sleep(1);

    if (!amount || !level || !range_val || !chest_type)
        print("Epic Chest Spawner " + spawner.serial + " at: " + spawner.x + ", " + spawner.y + " is improperly configured");
        return;
    endif

    while (spawner)
        // Check current chests to see if we need to spawn
        var current_chests := GetObjProperty(spawner, "spawned_epic_chests");
        var needs_respawn := 0; // Default to false
        var missing_chests := 0;
        var opened_chests := 0;
        
        if (!current_chests)
            needs_respawn := 1; // No chests exist at all
            missing_chests := amount; // Need to spawn all chests
        else
            var active_chests := 0;
            var valid_chests := array{};
            foreach serial in current_chests
                var chest := SystemFindObjectBySerial(CInt(serial));
                if (chest)
                    valid_chests.append(serial);
                    if (chest.locked) // If chest exists and hasn't been opened
                        active_chests += 1;
                    else
                        opened_chests += 1;
                    endif
                else
                    missing_chests += 1; // Chest was destroyed
                endif
            endforeach
            
            // Update the chest list if any were missing or opened
            SetObjProperty(spawner, "spawned_epic_chests", valid_chests);
            current_chests := valid_chests;
            
            // Need to respawn if we have any missing or opened chests
            if (active_chests < amount)
                needs_respawn := 1;
            endif
        endif
        
        if (needs_respawn)
            if (missing_chests > 0)
                print("Spawning " + missing_chests + " chests to replace destroyed ones");
            endif
            if (opened_chests > 0)
                print("Spawning " + opened_chests + " chests to replace opened ones");
            endif
            ClearMySpawnedChests(spawner); // Clear opened chests before spawning new ones
            MakeEpicChests(spawner, level, amount, range_val, chest_type, is_mimic, mimic_chance, is_puzzle, puzzle_limit_count);
        endif
        
        sleep(frq); // Use the configured frequency for respawn
    endwhile
endprogram

function MakeEpicChests(spawner, level, amount, range_val, chest_type, is_mimic, mimic_chance, is_puzzle, puzzle_limit_count)
    var current_chests_serials := GetObjProperty(spawner, "spawned_epic_chests");
    if (!current_chests_serials) current_chests_serials := array; endif

    // Count and clean up existing chests
    var valid_chests := array;
    var chest_count := 0;
    foreach serial_val in current_chests_serials
        var existing_chest := SystemFindObjectBySerial(CInt(serial_val));
        if (existing_chest)
            valid_chests.append(serial_val);
            chest_count += 1;
        endif
        sleepms(50); // Small delay to prevent server stress
    endforeach

    // Update our tracking list
    current_chests_serials := valid_chests;
    SetObjProperty(spawner, "spawned_epic_chests", current_chests_serials);

    // If we already have the requested amount of chests, don't spawn more
    if (chest_count >= amount)
        return;
    endif

    // Calculate how many new chests we need to spawn
    var new_amount_to_spawn := amount - chest_count;

    var loot_name_prefix := "";
    case (chest_type)
        "Warrior":  loot_name_prefix := "Humano" + "Guerreiro"; break;
        "Thief":    loot_name_prefix := "Humano" + "Ladino";   break;
        "Artifice": loot_name_prefix := "Humano" + "Artifice"; break;
        "Mage":     loot_name_prefix := "Humano" + "Sabio";    break;
        default:    loot_name_prefix := "Humano" + "Guerreiro"; break;
    endcase
    var lootname := loot_name_prefix + "Chest" + level;
    print("DEBUG::MakeEpicChests - Using loot table: " + lootname);

    var created_chests_this_cycle := array;
    var puzzle_chests_spawned_this_cycle := 0;

    for i := 1 to new_amount_to_spawn
        var new_x, new_y, new_z;
        var placement_tries := 0;
        var placed := 0;
        
        while (placement_tries < 30 && !placed)
            new_x := CInt(spawner.x + RandomInt(range_val) - RandomInt(range_val));
            new_y := CInt(spawner.y + RandomInt(range_val) - RandomInt(range_val));
            new_z := GetWorldHeight(new_x, new_y, spawner.realm);
            if (spawner.z > new_z + 5 || spawner.z < new_z - 5) new_z := spawner.z; endif

            if (len(ListItemsNearLocation(new_x, new_y, new_z, 0, spawner.realm)) == 0)
                var new_chest;
                var chests := array{};
                
                // Determine what type of chest to create
                if (is_puzzle)
                    var current_puzzle_count := CInt(GetObjProperty(spawner, "current_puzzle_count"));
                    if (!current_puzzle_count) 
                        current_puzzle_count := 0; 
                    endif
                    
                    if (puzzle_limit_count == -1 || current_puzzle_count < puzzle_limit_count)
                        // Create puzzle chest with random appearance
                        var type := RandomInt(4)+1;
                        var gfx, material;
                        case(type) // Same chest types as in treasurechest.inc
                            1: gfx := 3650; material := 0x1bd7; // Wooden E
                            2: gfx := 3651; material := 0x1bd7; // Wooden S
                            3: gfx := 3703; material := 0x1bd7; // Barrel
                            4: gfx := 3648; material := 0x6995; // Metal E
                            5: gfx := 3708; material := 0x6995; // Metal S
                        endcase
                        
                        new_chest := CreateItemAtLocation(new_x, new_y, new_z, 0xf022, 1, spawner.realm);
                        if (new_chest)
                            new_chest.graphic := gfx;
                            SetObjProperty(new_chest, PROPNAME_MATERIAL, material);
                            current_puzzle_count := current_puzzle_count + 1;
                            SetObjProperty(spawner, "current_puzzle_count", current_puzzle_count);
                            SetObjProperty(new_chest, "IsPuzzleChest", 1);
                        endif
                    endif
                endif
                
                // If not a puzzle chest (or puzzle limit reached), check for mimic
                if (!new_chest && is_mimic)
                    if (RandomInt(100) < mimic_chance)
                        // Randomly choose east or west facing mimic
                        var objtype := 0xCF89; // MimicEast
                        if (RandomInt(2) == 0)
                            objtype := 0xCF94; // MimicWest
                        endif
                        new_chest := CreateItemAtLocation(new_x, new_y, new_z, objtype, 1, spawner.realm);
                        if (new_chest)
                            // Mimics also get material property for consistent naming
                            var material := 0x1bd7;
                            SetObjProperty(new_chest, PROPNAME_MATERIAL, material);
                            SetObjProperty(new_chest, "IsMimic", 1);
                        endif
                    endif
                endif
                
                // If not puzzle or mimic, create regular epic chest with loot
                if (!new_chest)
                    chests := CreateTreasureChests(level, 1, 1, new_x, new_y, new_z, spawner.realm, lootname);
                    if (chests.size() > 0)
                        new_chest := chests[1];
                    endif
                endif
                
                if (new_chest)
                    placed := 1;
                    SetObjProperty(new_chest, "link", spawner.serial);
                    SetObjProperty(new_chest, "IsEpicChest", 1);
                    SetObjProperty(new_chest, "level", level);
                    SetObjProperty(new_chest, "chest_type", chest_type);
                    SetObjProperty(new_chest, PROPNAME_DISPENSAVEL_FLAG, 1);
                    SetObjProperty(new_chest, "CreatedOn", ReadGameClock());
                    new_chest.movable := 0;
                    new_chest.locked := 1;
                    
                    var trap := RandomInt(3)+1;
                    case(trap)
                        1: AddTrap(new_chest, "Needle", level);
                        2: AddTrap(new_chest, "Explosion", level);
                        3: AddTrap(new_chest, "PoisonGas", level);
                    endcase

                    // Generate loot for puzzle chest
                    if (GetObjProperty(new_chest, "IsPuzzleChest"))
                        Loot_Generate(new_chest, lootname);
                    endif
                    
                    created_chests_this_cycle.append(new_chest.serial);
                else
                    print("Failed to create epic chest item at " + new_x + "," + new_y);
                endif
            endif
            placement_tries += 1;
            sleepms(10);
        endwhile
    endfor

    if (created_chests_this_cycle.size() > 0)
        foreach serial_val in created_chests_this_cycle
            current_chests_serials.append(CInt(serial_val));
        endforeach
        SetObjProperty(spawner, "spawned_epic_chests", current_chests_serials);
    endif
endfunction

function ClearMySpawnedChests(spawner)
    var chest_serials := GetObjProperty(spawner, "spawned_epic_chests");
    if (chest_serials)
        var valid_chests := array{};
        foreach serial_val in chest_serials
            var chest := SystemFindObjectBySerial(CInt(serial_val));
            if (chest && GetObjProperty(chest, "link") == spawner.serial)
                if (!chest.locked) // Only remove if the chest is unlocked (opened)
                    DestroyItem(chest);
                else
                    valid_chests.append(serial_val); // Keep track of locked chests
                endif
            endif
            sleepms(5);
        endforeach
        SetObjProperty(spawner, "spawned_epic_chests", valid_chests); // Update the list with only locked chests
    endif
endfunction

// Helper function - needs to be implemented based on how puzzle chests are tracked globally or per spawner.
function CountPuzzleChests(realm_val)
    var count := 0;
    // This is a placeholder. You'll need to iterate through items or use a global counter.
    // For example, if puzzle chests have a specific global property or are stored in a global array.
    // foreach item_in_world in ListItemsInRealm(realm_val) // This would be very slow
    //    if(GetObjProperty(item_in_world, "IsPuzzleChest") && GetObjProperty(item_in_world, "IsActivePuzzle"))
    //        count++;
    //    endif
    // endforeach
    // A better way is to have puzzle chests register/unregister themselves from a global list or increment/decrement a global counter.
    var global_puzzle_list := GetGlobalProperty("ActivePuzzleChestsSerials");
    if(global_puzzle_list.IsArray())
        count := global_puzzle_list.size();
    endif
    return count; 
endfunction
