use uo;
use os;
use util;

include ":gumps:gumps";
include ":gumps:epicGumps";

program epicchest(who)

    var res := CreateEpicChestGump(who);
    if (res && res[99]) // Check if res is not empty and Create button (ID 99) was pressed
        var level := 1;
        if (res[12]) level := 2; elseif (res[13]) level := 3; elseif (res[14]) level := 4; elseif (res[15]) level := 5; endif

        var amount := 1;
        if (res[22]) amount := 2; elseif (res[23]) amount := 3; elseif (res[24]) amount := 4; elseif (res[25]) amount := 5; endif

        var range_val := 2;
        if (res[32]) range_val := 3; elseif (res[33]) range_val := 4; elseif (res[34]) range_val := 5; elseif (res[35]) range_val := 6; endif

        var chest_type := "Warrior";
        if (res[42]) chest_type := "Thief";
        elseif (res[43]) chest_type := "Artifice";
        elseif (res[44]) chest_type := "Mage";
        endif
        
        var is_mimic := CInt(res[50]); // Checkbox value is 0 or 1
        var mimic_chance := 0;
        if (is_mimic)
            // Get the actual text value entered by the user
            mimic_chance := CInt(GFExtractData(res, 51)); // Get text entry value for mimic chance
            if (mimic_chance < 0) mimic_chance := 0; endif
            if (mimic_chance > 100) mimic_chance := 100; endif
        endif

        var is_puzzle := CInt(res[60]); // Checkbox value for puzzle chest (ID 60)
        var puzzle_limit_count := 5; // Default to 5 (previously was -1)
        if (is_puzzle)
            // Read from new text entry ID 62 for the limit
            if (res[62] != "") // Check if the text entry is not empty
                puzzle_limit_count := CInt(GFExtractData(res, 62));
                if (puzzle_limit_count < 0) 
                    puzzle_limit_count := 0; // Limit cannot be negative, 0 means no puzzle chests of this type.
                endif
            endif
            // If text entry is empty, use default of 5
        endif

        var spawner := CreateItemAtLocation(who.x, who.y, who.z, 0x9F16, 1, who.realm);
        if (spawner)
            SetObjProperty(spawner, "epic_level", level);
            SetObjProperty(spawner, "epic_amount", amount);
            SetObjProperty(spawner, "epic_range", range_val);
            SetObjProperty(spawner, "epic_chest_type", chest_type);
            SetObjProperty(spawner, "epic_is_mimic", is_mimic);
            SetObjProperty(spawner, "epic_mimic_chance", mimic_chance);
            SetObjProperty(spawner, "epic_is_puzzle", is_puzzle);
            SetObjProperty(spawner, "epic_puzzle_limit_count", puzzle_limit_count);
            
            // Handle rest period (convert minutes to seconds)
            var rest_period := CInt(GFExtractData(res, 36));
            if (!rest_period || rest_period < 30) // Minimum 60 minutes
                rest_period := 120; // Default to 120 minutes if invalid
                SendSysMessageEx(who, "Período de descanso inválido ou muito curto. Usando o padrão de 120 minutos.");
            endif
            if (rest_period > 1440) // Cap at 24 hours
                rest_period := 1440;
                SendSysMessageEx(who, "Período de descanso muito longo. Limitando a 24 horas (1440 minutos).");
            endif
            SetObjProperty(spawner, "duration", rest_period * 60); // Convert minutes to seconds
            
            SetObjProperty(spawner, "script", ":chestspawn:epicchestspawner"); 
            spawner.invisible := 1;
            SendSysMessageEx(who, "Gerador de Baú Épico criado com sucesso em " + spawner.x + " " + spawner.y + " " + spawner.z + ".");
        else
            SendSysMessageEx(who, "Falha ao criar o item gerador.");
        endif
    else
        SendSysMessageEx(who, "Criação do Gerador de Baú Épico cancelada.");
    endif
endprogram

function CreateEpicChestGump(who)
    var gump := GFECreateGump("Epic! Configuração de Baús", 480, 600); // Adjusted size
    
    var y_pos := 80;
    var x_label := 30;
    var x_options_start := 200;
    var radio_spacing := 28;

    // --- Chest Level (1-5) ---
    GFTextLine(gump, x_label, y_pos, 1153, "Nível do Baú (1-5):");
    GFSetRadioGroup(gump, 1);
    GFRadioButton(gump, x_options_start, y_pos, 208, 209, 1, 11); GFTextLine(gump, x_options_start + 20, y_pos, 1153, "1");
    GFRadioButton(gump, x_options_start + radio_spacing*2, y_pos, 208, 209, 0, 12); GFTextLine(gump, x_options_start + radio_spacing*2 + 20, y_pos, 1153, "2");
    GFRadioButton(gump, x_options_start + radio_spacing*4, y_pos, 208, 209, 0, 13); GFTextLine(gump, x_options_start + radio_spacing*4 + 20, y_pos, 1153, "3");
    GFRadioButton(gump, x_options_start + radio_spacing*6, y_pos, 208, 209, 0, 14); GFTextLine(gump, x_options_start + radio_spacing*6 + 20, y_pos, 1153, "4");
    GFRadioButton(gump, x_options_start + radio_spacing*8, y_pos, 208, 209, 0, 15); GFTextLine(gump, x_options_start + radio_spacing*8 + 20, y_pos, 1153, "5");
    y_pos += 30;

    // --- Chest Amount (1-5) ---
    GFTextLine(gump, x_label, y_pos, 1153, "Quantidade de Baús (1-5):");
    GFSetRadioGroup(gump, 2);
    GFRadioButton(gump, x_options_start, y_pos, 208, 209, 1, 21); GFTextLine(gump, x_options_start + 20, y_pos, 1153, "1");
    GFRadioButton(gump, x_options_start + radio_spacing*2, y_pos, 208, 209, 0, 22); GFTextLine(gump, x_options_start + radio_spacing*2 + 20, y_pos, 1153, "2");
    GFRadioButton(gump, x_options_start + radio_spacing*4, y_pos, 208, 209, 0, 23); GFTextLine(gump, x_options_start + radio_spacing*4 + 20, y_pos, 1153, "3");
    GFRadioButton(gump, x_options_start + radio_spacing*6, y_pos, 208, 209, 0, 24); GFTextLine(gump, x_options_start + radio_spacing*6 + 20, y_pos, 1153, "4");
    GFRadioButton(gump, x_options_start + radio_spacing*8, y_pos, 208, 209, 0, 25); GFTextLine(gump, x_options_start + radio_spacing*8 + 20, y_pos, 1153, "5");
    y_pos += 30;

    // --- Spawn Radius (2-6 tiles) ---
    GFTextLine(gump, x_label, y_pos, 1153, "Raio de Spawn (2-6 tiles):");
    GFSetRadioGroup(gump, 3);
    GFRadioButton(gump, x_options_start, y_pos, 208, 209, 1, 31); GFTextLine(gump, x_options_start + 20, y_pos, 1153, "2");
    GFRadioButton(gump, x_options_start + radio_spacing*2, y_pos, 208, 209, 0, 32); GFTextLine(gump, x_options_start + radio_spacing*2 + 20, y_pos, 1153, "3");
    GFRadioButton(gump, x_options_start + radio_spacing*4, y_pos, 208, 209, 0, 33); GFTextLine(gump, x_options_start + radio_spacing*4 + 20, y_pos, 1153, "4");
    GFRadioButton(gump, x_options_start + radio_spacing*6, y_pos, 208, 209, 0, 34); GFTextLine(gump, x_options_start + radio_spacing*6 + 20, y_pos, 1153, "5");
    GFRadioButton(gump, x_options_start + radio_spacing*8, y_pos, 208, 209, 0, 35); GFTextLine(gump, x_options_start + radio_spacing*8 + 20, y_pos, 1153, "6");
    y_pos += 30;

    // --- Rest Period ---
    GFTextLine(gump, x_label, y_pos, 1153, "Período de Descanso (em minutos):");
    GFTextEntry(gump, x_options_start + 40, y_pos, 60, 20, 1153, "120", 36); // ID 36 for rest period
    y_pos += 30;

    GFResizePic(gump, x_label, y_pos, 3000, 420, 2); // Divider
    y_pos += 20;

    // --- Chest Type ---
    GFTextLine(gump, x_label, y_pos, 1153, "Tipo do Baú:");
    GFSetRadioGroup(gump, 4);
    y_pos += 25;
    GFRadioButton(gump, x_label + 20, y_pos, 208, 209, 1, 41);    GFTextLine(gump, x_label + 45, y_pos, 1153, "Guerreiro");
    y_pos += 25;
    GFRadioButton(gump, x_label + 20, y_pos, 208, 209, 0, 42);    GFTextLine(gump, x_label + 45, y_pos, 1153, "Ladrão");
    y_pos += 25;
    GFRadioButton(gump, x_label + 20, y_pos, 208, 209, 0, 43);    GFTextLine(gump, x_label + 45, y_pos, 1153, "Artífice");
    y_pos += 25;
    GFRadioButton(gump, x_label + 20, y_pos, 208, 209, 0, 44);    GFTextLine(gump, x_label + 45, y_pos, 1153, "Mago");
    y_pos += 30;
    
    GFResizePic(gump, x_label, y_pos, 3000, 420, 2); // Divider
    y_pos += 20;

    // --- Mimic Options ---
    GFCheckbox(gump, x_label, y_pos, 210, 211, 0, 50);
    GFTextLine(gump, x_label + 25, y_pos, 1153, "Gerar como Mímico?");
    y_pos += 25;
    GFTextLine(gump, x_label + 20, y_pos, 1153, "Chance de Mímico (%):");
    GFTextEntry(gump, x_options_start, y_pos, 60, 20, 1153, "10", 51); // ID 51 for text entry
    y_pos += 30;

    GFResizePic(gump, x_label, y_pos, 3000, 420, 2); // Divider
    y_pos += 20;

    // --- Puzzle Chest Options ---
    GFCheckbox(gump, x_label, y_pos, 210, 211, 0, 60); // ID 60 for puzzle chest
    GFTextLine(gump, x_label + 25, y_pos, 1153, "Gerar como Baú de Quebra-Cabeça?");
    y_pos += 25;
    GFTextLine(gump, x_label + 20, y_pos, 1153, "Máx. Baús de Quebra-Cabeça (deixe vazio para todos):"); // Changed text
    GFTextEntry(gump, x_options_start + 180, y_pos, 50, 20, 1153, "", 62); // New ID 62, default empty, adjusted x position
    y_pos += 30;
    
    GFResizePic(gump, x_label, y_pos, 3000, 420, 2); // Divider
    y_pos += 20;

    // --- Buttons ---
    GFAddButton(gump, x_label + 80, y_pos + 20, 2450, 2451, GF_CLOSE_BTN, 99); // Create ID 99
    GFAddButton(gump, x_label + 250, y_pos + 20, 2453, 2454, GF_CLOSE_BTN, 0); // Cancel ID 0
    
    return GFSendGump(who, gump);
endfunction
