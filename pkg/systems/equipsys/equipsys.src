include "include/props";
include "include/equipstats";
include "include/utils";
include ":commands:debugsystem";

program EquipSys(params)
	var who := params[1];
	var item := params[2];

	if (item.IsA(POLCLASS_ARMOR))
		setArmorStats(item);
		debugArmor(who, item);
	elseif (item.IsA(POLCLASS_WEAPON))
		setWeaponStats(item);
		debugWeapon(who, item);
	endif
endprogram

/**
 * setWeaponStats(weapon)
 *
 * Purpose
 * Define os valores na arma, setando as devidas props e os atributos no item.
 *
 * Parameters
 * weapon: ItemRef da arma.
 *
 */
function setWeaponStats(weapon)
	var stats := getWeaponStats(weapon);
	setPropWeapon(weapon);

	// TODO: Como agora há um range de Speed e CriticalChance, setar o valor mínimo e um mod baseado no range.
	// TODO: Setar na arma o que não vai em Prop
	weapon.speed_mod := stats.AttackSpeed != error ? (CInt(stats.AttackSpeed) - 24) : 0;
endfunction

/**
 * setArmorStats(armor)
 *
 * Purpose
 * Define os valores na armadura, setando as devidas props e os atributos no item.
 *
 * Parameters
 * weapon: ItemRef da armadura.
 *
 */
function setArmorStats(armor)
	var stats := getArmorStats(armor);
	setPropArmor(armor);

	// TODO: Setar na armadura o que não vai em CProp
endfunction

function debugWeapon(who, weapon)
	var prop := getPropBase(weapon);

	DebugMsg(who, DEBUG_EQUIP, "====================");
	DebugMsg(who, DEBUG_EQUIP, $"Arma: {weapon.desc}");
	DebugMsg(who, DEBUG_EQUIP, "====================");
	DebugMsg(who, DEBUG_EQUIP, $"[DANO PRINCIPAL] {SLASHDAMAGE}: {prop.SlashMainDamage}");
	DebugMsg(who, DEBUG_EQUIP, $"[DANO PRINCIPAL] {PIERCINGDAMAGE}: {prop.PiercingMainDamage}");
	DebugMsg(who, DEBUG_EQUIP, $"[DANO PRINCIPAL] {BLUNTDAMAGE}: {prop.BluntMainDamage}");

	if(IsDualWield(weapon))
		DebugMsg(who, DEBUG_EQUIP, $"[DANO SECUNDÁRIO] {SLASHDAMAGE}: {prop.SlashOffDamage}");
		DebugMsg(who, DEBUG_EQUIP, $"[DANO SECUNDÁRIO] {PIERCINGDAMAGE}: {prop.PiercingOffDamage}");
		DebugMsg(who, DEBUG_EQUIP, $"[DANO SECUNDÁRIO] {BLUNTDAMAGE}: {prop.BluntOffDamage}");
	endif

	DebugMsg(who, DEBUG_EQUIP, $"[DANO ELEMENTAL] Fogo: {prop.FireDamage}");
	DebugMsg(who, DEBUG_EQUIP, $"[DANO ELEMENTAL] Gelo: {prop.ColdDamage}");
	DebugMsg(who, DEBUG_EQUIP, $"[DANO ELEMENTAL] Veneno: {prop.PoisonDamage}");
	DebugMsg(who, DEBUG_EQUIP, $"[DANO ELEMENTAL] Energia: {prop.EnergyDamage}");

	DebugMsg(who, DEBUG_EQUIP, $"Principal Postura de Ataque: {prop.AttackType}");
	DebugMsg(who, DEBUG_EQUIP, $"Velocidade: {prop.AttackSpeed}");
	DebugMsg(who, DEBUG_EQUIP, $"Chance de Crítico: {prop.CriticalChance}%");
endfunction

function debugArmor(who, armor)
	var prop := getPropBase(armor);

	DebugMsg(who, DEBUG_EQUIP, "====================");
	DebugMsg(who, DEBUG_EQUIP, $"Arma: {armor.desc}");
	DebugMsg(who, DEBUG_EQUIP, "====================");

	DebugMsg(who, DEBUG_EQUIP, $"[RESIST. FÍSICA] {SLASHDAMAGE}: {prop.SlashResist}");
	DebugMsg(who, DEBUG_EQUIP, $"[RESIST. FÍSICA] {PIERCINGDAMAGE}: {prop.PiercingResist}");
	DebugMsg(who, DEBUG_EQUIP, $"[RESIST. FÍSICA] {BLUNTDAMAGE}: {prop.BluntResist}");
	DebugMsg(who, DEBUG_EQUIP,
		$"[RESIST. FÍSICA] Material: {armor.getMaterialName()}" +
		"(" +
		$"{getResistPhysicalByMaterial(armor.getMaterialName())[1]}" +
		")"
	);


	DebugMsg(who, DEBUG_EQUIP, $"[RESIST. ELEMENTAL] Fogo: {prop.FireResist}");
	DebugMsg(who, DEBUG_EQUIP, $"[RESIST. ELEMENTAL] Gelo: {prop.ColdResist}");
	DebugMsg(who, DEBUG_EQUIP, $"[RESIST. ELEMENTAL] Veneno: {prop.PoisonResist}");
	DebugMsg(who, DEBUG_EQUIP, $"[RESIST. ELEMENTAL] Energia: {prop.EnergyResist}");

	DebugMsg(who, DEBUG_EQUIP, $"Slot: {armor.Coverage}");

	// TODO: PENALIDADES
endfunction