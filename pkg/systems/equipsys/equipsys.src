include "include/props";
include "include/equipstats";
include "include/utils";
include ":commands:debugsystem";

program EquipSys(params)
	var who := params[1];
	var item := params[2];

	if (item.IsA(POLCLASS_ARMOR))
		setArmorStats(item);
		debugArmor(who, item);
	elseif (item.IsA(POLCLASS_WEAPON))
		setWeaponStats(item);
		debugWeapon(who, item);
	endif
endprogram

/**
 * setWeaponStats(weapon)
 *
 * Purpose
 * Define os valores na arma, setando as devidas props e os atributos no item.
 *
 * Parameters
 * weapon: ItemRef da arma.
 *
 */
function setWeaponStats(weapon)
	var stats := getWeaponStats(weapon);
	setPropWeapon(weapon);

	// Setar a partir daqui, direto no item, o que não vai em CProp
	weapon.speed_mod := stats.AttackSpeed != error ? (CInt(stats.AttackSpeed) - 24) : 0;
endfunction

/**
 * setArmorStats(armor)
 *
 * Purpose
 * Define os valores na armadura, setando as devidas props e os atributos no item.
 *
 * Parameters
 * weapon: ItemRef da armadura.
 *
 */
function setArmorStats(armor)
	var stats := getArmorStats(armor);
	setPropArmor(armor);

	// Setar a partir daqui, direto no item, o que não vai em CProp
endfunction

function debugWeapon(who, weapon)
	var prop := getPropBase(weapon);

	var materialName := weapon.getMaterialName() ? weapon.getMaterialName() : "Nenhum";

	DebugMsg(who, DEBUG_EQUIP, "====================");
	DebugMsg(who, DEBUG_EQUIP, $"Arma: {weapon.desc}");
	DebugMsg(who, DEBUG_EQUIP, "====================");
	DebugMsg(who, DEBUG_EQUIP, $"[DANO PRINCIPAL] {SLASHDAMAGE}: {prop.SlashMainDamage}");
	DebugMsg(who, DEBUG_EQUIP, $"[DANO PRINCIPAL] {PIERCINGDAMAGE}: {prop.PiercingMainDamage}");
	DebugMsg(who, DEBUG_EQUIP, $"[DANO PRINCIPAL] {BLUNTDAMAGE}: {prop.BluntMainDamage}");

	if(weapon.isDualWield())
		DebugMsg(who, DEBUG_EQUIP, $"[DANO SECUNDÁRIO] {SLASHDAMAGE}: {prop.SlashOffDamage}");
		DebugMsg(who, DEBUG_EQUIP, $"[DANO SECUNDÁRIO] {PIERCINGDAMAGE}: {prop.PiercingOffDamage}");
		DebugMsg(who, DEBUG_EQUIP, $"[DANO SECUNDÁRIO] {BLUNTDAMAGE}: {prop.BluntOffDamage}");
	endif

	DebugMsg(who, DEBUG_EQUIP, $"[DANO ELEMENTAL] Fogo: {prop.FireDamage}");
	DebugMsg(who, DEBUG_EQUIP, $"[DANO ELEMENTAL] Gelo: {prop.ColdDamage}");
	DebugMsg(who, DEBUG_EQUIP, $"[DANO ELEMENTAL] Veneno: {prop.PoisonDamage}");
	DebugMsg(who, DEBUG_EQUIP, $"[DANO ELEMENTAL] Energia: {prop.EnergyDamage}");

	DebugMsg(who, DEBUG_EQUIP, $"Material: {materialName}");
	DebugMsg(who, DEBUG_EQUIP, $"Principal Postura de Ataque: {prop.AttackType}");
	DebugMsg(who, DEBUG_EQUIP, $"Velocidade: {prop.AttackSpeed}");
	DebugMsg(who, DEBUG_EQUIP, $"Chance de Crítico: {prop.CriticalChance}%");
endfunction

function debugArmor(who, armor)
	var prop := getPropBase(armor);

	var materialName := armor.getMaterialName() ? armor.getMaterialName() : "Nenhum";
	var slot := armor.getSlot();
	var type := armor.getType();
	
	var resistByMaterial := getResistPhysicalByMaterial(armor);
	var resistBySlot := getResistPhysicalBySlot(armor);
	var resistByProtection := getResistPhysicalByProtection(armor);

	DebugMsg(who, DEBUG_EQUIP, "====================");
	DebugMsg(who, DEBUG_EQUIP, $"Equipamento: {armor.desc}");
	DebugMsg(who, DEBUG_EQUIP, "====================");

	DebugMsg(who, DEBUG_EQUIP, "[RESISTÊNCIA FÍSICA]");
	DebugMsg(who, DEBUG_EQUIP, $"{SLASHDAMAGE}: {prop.SlashResist}");
	DebugMsg(who, DEBUG_EQUIP, $"{PIERCINGDAMAGE}: {prop.PiercingResist}");
	DebugMsg(who, DEBUG_EQUIP, $"{BLUNTDAMAGE}: {prop.BluntResist}");
	DebugMsg(who, DEBUG_EQUIP, $"Material ({materialName}): {resistByMaterial["SlashResist"]}/{resistByMaterial["PiercingResist"]}/{resistByMaterial["BluntResist"]}");
	DebugMsg(who, DEBUG_EQUIP, $"Slot ({slot}): {resistBySlot["SlashResist"]}/{resistBySlot["PiercingResist"]}/{resistBySlot["BluntResist"]}");
	DebugMsg(who, DEBUG_EQUIP, $"Tipo de Proteção ({type}): {resistByProtection["SlashResist"]}/{resistByProtection["PiercingResist"]}/{resistByProtection["BluntResist"]}
	");

	DebugMsg(who, DEBUG_EQUIP, "[RESISTÊNCIA ELEMENTAL]");
	DebugMsg(who, DEBUG_EQUIP, $"Fogo: {prop.FireResist}");
	DebugMsg(who, DEBUG_EQUIP, $"Gelo: {prop.ColdResist}");
	DebugMsg(who, DEBUG_EQUIP, $"Veneno: {prop.PoisonResist}");
	DebugMsg(who, DEBUG_EQUIP, $"Energia: {prop.EnergyResist}
	");
	
	DebugMsg(who, DEBUG_EQUIP, $"Material: {materialName}");
	DebugMsg(who, DEBUG_EQUIP, $"Slot: {slot}
	");

	DebugMsg(who, DEBUG_EQUIP, "[PENALIDADES]");
	DebugMsg(who, DEBUG_EQUIP, $"Dexterity: {prop.DexPen}");
	DebugMsg(who, DEBUG_EQUIP, $"Sneak: {prop.SneakPen}");
	DebugMsg(who, DEBUG_EQUIP, $"Mechanics: {prop.MAPen}");
	DebugMsg(who, DEBUG_EQUIP, $"Magery: {prop.MageryPen}");
	DebugMsg(who, DEBUG_EQUIP, $"Awareness: {prop.AwarenessPen}");
endfunction