use uo;
use os;

include ":attributes:attributes";
include ":timedscripts:timedScripts";
include "include/client";
include "include/sounds";
include "include/say";
include "include/shapes";
include "include/utils";

program armadilhademoniaca(params)
    var who := params[1];
    
    // Calculate range based on Theology
    var range := CInt(AP_GetSkill(who, THEOLOGY)/10);
    if (range < 2)
        range := 2;
    endif
    
    var duration := 30; // 10 seconds
    var cfg := ReadConfigFile(":*:npcdesc");
    var inimigo := array{"Demon", "Undead"};
    
    // Create pentagram using two triangles
    // First triangle (pointing up)
    var tri1_coords := GetCoordsInTriangle(who.x, who.y-range, 
                                           who.x+range, who.y+range, 
                                           who.x-range, who.y+range);
                                           
    // Second triangle (pointing down)
    var tri2_coords := GetCoordsInTriangle(who.x-range, who.y-range/2, 
                                           who.x+range, who.y-range/2, 
                                           who.x, who.y+range);
    
    // Combine coordinates
    var all_coords := tri1_coords + tri2_coords;
    
    // Play pentagram effects
    var rune_effects := array{0x484A, 0x484D, 0x4850, 0x4853, 0x4856, 0x4859, 0x485C, 0x485F};
    
    // Find all affected targets
    var targets := array{};
    
    foreach mob in ListMobilesNearLocation(who.x, who.y, who.z, range, who.realm)
        if (mob.serial != who.serial)
            if (!(mob in who.party.members))
                targets.append(mob.serial);
                
                // Mark for chain of pain
                SetObjProperty(mob, "#chainofpain", ReadGameClock() + duration);
                SetObjProperty(mob, "#mageserial", who.serial);
                
                // Apply trap to demons/undead
                if (mob.npctemplate)
                    var npctemplate := NPC_ParseTemplateName(mob.npctemplate);
                    if (cfg[npctemplate.template].Category in inimigo)
                        TS_StartTimer(mob, "paralysis", duration);
                        // Enhanced damage for demons/undead
                        ApplyRawDamage(mob, range); // Extra damage for demons/undead
                    endif
                endif
            endif
        endif
    endforeach
    
    // Create visual chain connections between targets
    if (targets.size() > 0)
        var y := 0;
        foreach targs in targets
            var mob := SystemFindObjectBySerial(targs);
            if (y != targets.size())
                y := y + 1;
            else
                y := 1;
            endif
            
            var mob2 := SystemFindObjectBySerial(targets[y]);
            
            // Visual effects for the chain
            PlayObjectCenteredEffectEx(mob, 0x484A, 0, 10, 2444);
            PlayMovingEffectEx(mob, mob2, 0x484D, 10, 0, 2444);
            
            // Store chain serials for damage sharing
            SetObjProperty(mob, "#chainserials", targets);
        endforeach
        
        // Apply initial damage to all targets
        foreach targs in targets
            var mob := SystemFindObjectBySerial(targs);
            ApplyRawDamage(mob, 20); // Base damage to all targets
        endforeach
    endif
    
    // Maintain the pentagram effect
    var end_time := ReadGameClock() + duration;
    while (ReadGameClock() < end_time)
        // Refresh pentagram visuals
        foreach coord in all_coords
            if (RandomInt(5) == 1) // Only refresh some effects to avoid overload
                PlayStationaryEffect(coord.x, coord.y, who.z, rune_effects.randomentry(), 1, 10, 0);
            endif
        endforeach
        
        // Check for demons/undead trying to escape
        foreach mob in ListMobilesNearLocation(who.x, who.y, who.z, range+2, who.realm)
            if (mob.serial != who.serial && !(mob in who.party.members))
                if (mob.npctemplate)
                    var npctemplate := NPC_ParseTemplateName(mob.npctemplate);
                    if (cfg[npctemplate.template].Category in inimigo)
                        var dist := CoordinateDistance(who.x, who.y, mob.x, mob.y);
                        if (dist > range)
                            // Push back inside
                            PushBack(mob, 5, 100);
                        endif
                    endif
                endif
            endif
        endforeach
        
        sleepms(500);
    endwhile
    
    SendSysMessageEx(who, "Armadilha demon√≠aca finalizada.", SSM_INFO);
    return 1;
endprogram