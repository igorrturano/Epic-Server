use uo;
use os;
use util;
use basicio;
include ":attributes:attributes";
include ":tn:boss";
include ":combat:hitscripts";
include "include/epicNPCUtils";

program spawnpointcontrol(spawnpoint)
    var templates := array{};
    var amounts := array{};
    var tiers := array{};
    var names := array{};
    var totalAmount := 0;
    var i;

    for ( i := 1; i <= 3; i += 1 )
        var t := GetObjProperty(spawnpoint, "Template" + i);
        if ( t && t != "" )
            var a := GetObjProperty(spawnpoint, "Amount" + i);
            var rTier := GetObjProperty(spawnpoint, "Tier" + i);
            var rName := GetObjProperty(spawnpoint, "Name" + i);
            a := a ? a : "0";
            rTier := rTier ? rTier : "0";
            rName := rName ? rName : "";

            templates.append(t);
            amounts.append(Cint(a));
            tiers.append(rTier);
            names.append(rName);
            totalAmount += Cint(a);
        endif
    endfor

    if ( templates.size() == 0 )
        var singleTemplate := GetObjProperty(spawnpoint, "Spawn");
        if ( singleTemplate && singleTemplate != "" && singleTemplate != "NONE" )
            var singleAmount := GetObjProperty(spawnpoint, "Amount");
            singleAmount := singleAmount ? singleAmount : "0";

            templates.append(singleTemplate);
            amounts.append(Cint(singleAmount));
            tiers.append(GetObjProperty(spawnpoint, "Tier") ? GetObjProperty(spawnpoint, "Tier") : "0");
            names.append(GetObjProperty(spawnpoint, "Name") ? GetObjProperty(spawnpoint, "Name") : "");
            totalAmount := Cint(singleAmount);
        endif
    endif

    while (templates.size() == 0 || (templates.size() == 1 && templates[0] == "NONE"))
        sleep(10);

        // Recarrega caso algo tenha mudado dinamicamente
        templates := array{};
        amounts := array{};
        tiers := array{};
        names := array{};
        totalAmount := 0;

        for ( i := 1; i <= 3; i += 1 )
            var t := GetObjProperty(spawnpoint, "Template" + i);
            if ( t && t != "" )
                var a := GetObjProperty(spawnpoint, "Amount" + i);
                var rTier := GetObjProperty(spawnpoint, "Tier" + i);
                var rName := GetObjProperty(spawnpoint, "Name" + i);
                a := a ? a : "0";
                rTier := rTier ? rTier : "0";
                rName := rName ? rName : "";

                templates.append(t);
                amounts.append(Cint(a));
                tiers.append(rTier);
                names.append(rName);
                totalAmount += Cint(a);
            endif
        endfor

        if ( templates.size() == 0 )
            var st := GetObjProperty(spawnpoint, "Spawn");
            if ( st && st != "NONE" && st != "" )
                var sa := GetObjProperty(spawnpoint, "Amount");
                sa := sa ? sa : "0";
                templates.append(st);
                amounts.append(Cint(sa));
                tiers.append(GetObjProperty(spawnpoint, "Tier") ? GetObjProperty(spawnpoint, "Tier") : "0");
                names.append(GetObjProperty(spawnpoint, "Name") ? GetObjProperty(spawnpoint, "Name") : "");
                totalAmount := Cint(sa);
            endif
        endif
    endwhile

    var spawnqueue := array{};
    var childrenSerial := array{};
    for(i := 1; i <= totalAmount; i += 1)
        spawnqueue[i] := "Empty";
        childrenSerial[i] := "Empty";
    endfor

    SetObjProperty(spawnpoint, "Children", childrenSerial);
    SetObjProperty(spawnpoint, "SpawnQueue", spawnqueue);

    ResetSpawnQueue(spawnpoint, amounts);

    var randSleep := RandomInt(20);
    sleep(randSleep);

    var resetme;
    var x;

    while(spawnpoint)
        resetme := GetObjProperty(spawnpoint, "ResetMe");
        if(resetme)
            KillChildren(spawnpoint, totalAmount);
            ResetSpawnQueue(spawnpoint, amounts);
            EraseObjProperty(spawnpoint, "ResetMe");
        endif

        childrenSerial := GetObjProperty(spawnpoint, "Children");
        spawnqueue := GetObjProperty(spawnpoint, "SpawnQueue");

        // Verifica NPCs mortos ou ausentes
        for(i:=1; i<=totalAmount; i+=1)
            if((childrenSerial[i] != error) && (childrenSerial[i] != "Empty"))
                x := SystemFindObjectBySerial(childrenSerial[i]);
                if((!x) || (x.dead == 1) || (x.master))
                    spawnqueue[i] := "Empty";
                    childrenSerial[i] := "Empty";
                endif
            endif
        endfor

        SetObjProperty(spawnpoint, "Children", childrenSerial);
        SetObjProperty(spawnpoint, "SpawnQueue", spawnqueue);
        ResetSpawnQueue(spawnpoint, amounts);

        // Spawna os NPCs quando o tempo chega em 0
        spawnqueue := GetObjProperty(spawnpoint, "SpawnQueue");
        for(i:=1; i<=totalAmount; i+=1)
            var state := spawnqueue[i];
            if(state != "Empty" && state != "Active")
                if(state == 0)
                    while (hasplayernearSpawn(spawnpoint.x, spawnpoint.y, spawnpoint.realm))
                        sleep(60);
                    endwhile
                    childrenSerial[i] := CreateSpawn(spawnpoint, templates, amounts, tiers, names, i);
                    if (GetObjProperty(spawnpoint, "unique") == 1)
                        var spawnmod := GetObjProperty(spawnpoint, "uniquestat");
                        SetBoss(SystemFindObjectBySerial(childrenSerial[i]), spawnmod);
                    endif
                    spawnqueue[i] := "Active";
                else
                    spawnqueue[i] := state - 1;
                endif
            endif
        endfor

        SetObjProperty(spawnpoint, "SpawnQueue", spawnqueue);
        SetObjProperty(spawnpoint, "Children", childrenSerial);

        sleep(60);
    endwhile
endprogram

function hasplayernearSpawn(x, y, realm)
    var num_player := ListMobilesNearLocation( x, y, 19, LISTEX_FLAG_PLAYERS_ONLY && LISTEX_FLAG_NORMAL, realm).size();
    return num_player > 0;
endfunction

function KillChildren(spawnpoint, totalAmount)
    var i;
    var children := GetObjProperty(spawnpoint, "Children");
    if(children)
        foreach x in children
            if(x != "Empty")
                var npcSerial := CInt(x);
                var npc := SystemFindObjectBySerial(npcSerial);
                if (npc && !npc.master)
                    SetObjProperty(npc, "summoned", 1);
                    SetObjProperty(npc, "spawnkill", 1);
                    RevokePrivilege(npc, "invul");
                    ApplyRawDamage(npc, GetVital(npc, HITS)+3);
                endif
            endif
        endforeach
    endif

    var spawnqueue := array{};
    children := array{};
    for(i:=1; i<=totalAmount; i+=1)
        spawnqueue[i] := "Empty";
        children[i] := "Empty";
    endfor
    SetObjProperty(spawnpoint, "Children", children);
    SetObjProperty(spawnpoint, "SpawnQueue", spawnqueue);
endfunction

function ResetSpawnQueue(spawnpoint, amounts)
    var i;
    var mindelay := GetObjProperty(spawnpoint, "MinDelay");
    var maxdelay := GetObjProperty(spawnpoint, "MaxDelay");
    var spawnqueue := GetObjProperty(spawnpoint, "SpawnQueue");

    mindelay := mindelay ? Cint(mindelay) : 1;
    maxdelay := maxdelay ? Cint(maxdelay) : 1;

    if(mindelay < 1)
        mindelay := 1;
    endif
    if(maxdelay < 1)
        maxdelay := 1;
    endif

    for(i:=1; i<=spawnqueue.size(); i+=1)
        if(spawnqueue[i] == "Empty")
            if(mindelay == maxdelay)
                spawnqueue[i] := mindelay;
            else
                spawnqueue[i] := RandomInt(maxdelay - mindelay) + mindelay + 1;
            endif
        endif
    endfor
    SetObjProperty(spawnpoint, "SpawnQueue", spawnqueue);
endfunction

function CreateSpawn(spawnpoint, templates, amounts, tiers, names, index)
    var cumulative := 0;
    var chosenTemplateIndex := 0;
    var i;

    for(i := 1; i <= templates.size(); i+=1)
        cumulative += amounts[i];
        if(index <= cumulative)
            chosenTemplateIndex := i;
            break;
        endif
    endfor

    var chosenTemplate := templates[chosenTemplateIndex];
    var chosenTier := tiers[chosenTemplateIndex] ? tiers[chosenTemplateIndex] : "0";
    var chosenName := names[chosenTemplateIndex] ? names[chosenTemplateIndex] : "";
    return SetupSpawn(spawnpoint, chosenTemplate, chosenTier, chosenName);
endfunction

function SetupSpawn(spawnpoint, spawn, tier, npcName)
    var loscheck := GetObjProperty(spawnpoint, "IgnoreLOS");
    var range := GetObjProperty(spawnpoint, "Range");
    loscheck := loscheck ? Cint(loscheck) : 0;
    range := range ? Cint(range) : 0;

    spawn := GetCritter(spawn);

    var x, y, z, success := 0;
    var i := 1;
    var npc;

    while(success == 0)
        if(range == 0)
            x := spawnpoint.x;
            y := spawnpoint.y;
            z := spawnpoint.z;
        elseif(spawnpoint.z >= 0)
            x := spawnpoint.x + RandomInt(2 * range) - range;
            y := spawnpoint.y + RandomInt(2 * range) - range;
            z := GetWorldHeight(x, y, spawnpoint.realm);
        else
            x := spawnpoint.x + RandomInt(2 * range) - range;
            y := spawnpoint.y + RandomInt(2 * range) - range;
            z := spawnpoint.z;
        endif

        if(!loscheck)
            if(CheckLosBetween( spawnpoint.x, spawnpoint.y, spawnpoint.z, x, y, z, spawnpoint.realm ))
                npc := CreateNpc(spawn, x, y, z, 0, spawnpoint.realm);
                success := 1;
                SetObjProperty(npc, "spawnpoint", spawnpoint.serial);
                SetupCustomProps(spawnpoint, npc, tier, npcName);
                return npc.serial;
            endif
        else
            npc := CreateNpc(spawn, x, y, z, 0, spawnpoint.realm);
            success := 1;
            SetObjProperty(npc, "spawnpoint", spawnpoint.serial);
            SetupCustomProps(spawnpoint, npc, tier, npcName);
            return npc.serial;
        endif

        i := i + 1;
        if(i > 10)
            npc := CreateNpc(spawn, spawnpoint.x, spawnpoint.y, spawnpoint.z, 0, spawnpoint.realm);
            success := 1;
            SetObjProperty(npc, "spawnpoint", spawnpoint.serial);
            SetupCustomProps(spawnpoint, npc, tier, npcName);
            return npc.serial;
        endif
    endwhile
endfunction

function SetupCustomProps(spawnpoint, npc, tier, npcName)
    customizeNpc(npc, tier);
    if(npcName && npcName != "")
        SetName(npc, npcName);
    endif
endfunction

function CreateNpc(template, x, y, z, props, realm)
    var result;
    var paths := array{
        ":epicAI:" + template,
        ":brainAI:" + template,
        ":merchants:" + template
    };

    if(SplitWords(template)[1] != ":")
        foreach path in paths
            result := CreateNpcFromTemplate(path, x, y, z, props, realm);
            if(result)
                return result;
            endif
        endforeach
    else
        result := CreateNpcFromTemplate(template, x, y, z, props, realm);
    endif

    return result;
endfunction

function GetCritter(type)
    if(type == "vermin")
        case(RandomInt(11) + 1)
            1: return "grat";
            2: return "grat";
            3: return "grat";
            4: return "jwilson";
            5: return "slime";
            6: return "slime";
            7: return "slime";
            8: return "giant_serpent";
            9: return "giant_serpent";
           10: return "giantscorp";
           11: return "giantscorp";
        endcase
    elseif(type == "orcs")
        case(RandomInt(10) + 1)
            1: return "orcmage";
            2: return "orclord";
            3: return "orc1";
            4: return "orc1";
            5: return "orc1";
            6: return "orc2";
            7: return "orc2";
            8: return "orc2";
            9: return "ettin";
           10: return "ettin2";
        endcase
    elseif(type == "orchorde")
        case(RandomInt(8) + 1)
            1: return "orc1";
            2: return "orc1";
            3: return "orc1";
            4: return "orcmage";
            5: return "orclord";
            6: return "orc2";
            7: return "orc2";
            8: return "orc2";
        endcase
    elseif(type == "ratmen")
        case(RandomInt(3) + 1)
            1: return "ratman3";
            2: return "ratman2";
            3: return "ratman1";
        endcase
    elseif(type == "lizardmen")
        case(RandomInt(3) + 1)
            1: return "lizardman3";
            2: return "lizardman2";
            3: return "lizardman1";
        endcase
    elseif(type == "dracos")
        case(RandomInt(4) + 1)
            1: return "dragon1";
            2: return "dragon2";
            3: return "drake1";
            4: return "drake2";
        endcase
    elseif(type == "trolls")
        case(RandomInt(3) + 1)
            1: return "troll1";
            2: return "troll2";
            3: return "troll3";
        endcase
    elseif(type == "undead")
        case(RandomInt(7) + 1)
            1: return "zombie";
            2: return "zombie";
            3: return "skeleton";
            4: return "skeleton";
            5: return "shade";
            6: return "shade";
            7: return "liche";
        endcase
    elseif(type == "lesserundead")
        case(RandomInt(4) + 1)
            1: return "zombie";
            2: return "zombie";
            3: return "skeleton";
            4: return "skeleton";
        endcase
    elseif(type == "ettins")
        case(RandomInt(2) + 1)
            1: return "ettin";
            2: return "ettin2";
        endcase
    else
        return type;
    endif
endfunction
