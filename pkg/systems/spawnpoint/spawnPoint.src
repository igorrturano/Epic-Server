use uo;
use os;
include ":attributes:attributes";
include "include/say";
include ":gumps:gumps";
include ":gumps:yesNo";
include ":gumps:requestGump";
include ":gumps:gumps_ex";
include ":gumps:epicGumps";
include ":tn:boss";

const GUMP_BACKGROUND := 39929;
const INTERNAL_BACKGROUND := 9350;
const GUMP_WIDTH := 540;
const GUMP_HEIGHT := 450;
const INTERNAL_WIDTH := 435;
const BACKGROUND_WIDTH := 465;

program use_spawnpoint( who, spawnpoint )
  if ( who.cmdlevel < 2 )
    SendSysMessage( who, "Você não tem permissão para usar isso." );
    return;
  endif

  var gump := GFECreateGump( "", GUMP_WIDTH, GUMP_HEIGHT, array{ HIDE_BORDER } );
  // GFGumpPicTiled( gump, 10, 10, 495, 565, GUMP_BACKGROUND );
  AdicionarMoldura( gump );
  GFResizePic( gump, 15, 70, INTERNAL_BACKGROUND, GUMP_WIDTH - 20, GUMP_HEIGHT - 80 );
  GFTextMid( gump, 80, 35, 420, 53, "Spawn Point" );

  // Load properties
	var range := GetObjProperty(spawnpoint, "Range");
	var mindelay := GetObjProperty(spawnpoint, "MinDelay");
	var maxdelay := GetObjProperty(spawnpoint, "MaxDelay");
  var los_checked := GetObjProperty(spawnpoint, "IgnoreLOS") ? 1 : 0;
  var boss_checked := GetObjProperty(spawnpoint, "uniquestat") ? 1 : 0;

  // Add labels, load saved templates and input fields for templates
  var x_label := 30, x_field := 100, y := 80, spacing := 40, i;
  for ( i := 1; i <= 3; i += 1 )
    var template := GetObjProperty(spawnpoint, Cstr("Template" + i)) ? GetObjProperty(spawnpoint, Cstr("Template" + i)) : "";
    var amount := GetObjProperty(spawnpoint, Cstr("Amount" + i)) ? GetObjProperty(spawnpoint, Cstr("Amount" + i)) : "";
    var tier := GetObjProperty(spawnpoint, Cstr("Tier" + i)) ? GetObjProperty(spawnpoint, Cstr("Tier" + i)) : "";
    var name := GetObjProperty(spawnpoint, Cstr("Name" + i)) ? GetObjProperty(spawnpoint, Cstr("Name" + i)) : "";

    GFTextLine( gump, x_label, y, 2100, "Template:" );
    GFEAddTextBox( gump, x_field, y, 150, 20, COLOR_YELLOW, template, i );

    GFTextLine( gump, x_field + 160, y, 2100, "Quantidade:" );
    GFEAddTextBox( gump, x_field + 250, y, 50, 20, COLOR_YELLOW, amount, i + 3 );

    GFTextLine( gump, x_field + 310, y, 2100, "Tier:" );
    GFEAddTextBox( gump, x_field + 350, y, 50, 20, COLOR_YELLOW, tier, i + 6 );

    // GFTextLine( gump, x_field, y, 2100, "Nome:" );
    // GFEAddTextBox( gump, x_field + 100, y, 50, 20, COLOR_YELLOW, name, i + 9 );
    y += spacing;
  endfor

  // Add range label and input field
  y += 10;
  GFTextLine( gump, x_label, y, 2100, "Alcance:" );
  GFEAddTextBox( gump, x_field, y, 100, 20, COLOR_YELLOW, range, 13 );

  // Add respawn labels and input fields
  y += spacing;
  GFTextLine( gump, x_label, y, 2100, "Respawn (em minutos):" );
  y += 20;
  GFTextLine( gump, x_label, y, 2100, "Mínimo:" );
  GFEAddTextBox( gump, x_field, y, 100, 20, COLOR_YELLOW, mindelay, 14 );
  GFTextLine( gump, x_field + 120, y, 2100, "Máximo:" );
  GFEAddTextBox( gump, x_field + 200, y, 100, 20, COLOR_YELLOW, maxdelay, 15 );

  // Add LOS and BOSS checkboxes
  y += spacing;
  GFTextLine( gump, x_label, y + 10, 2100, "Ignorar LOS:" );
  GFCheckBox( gump, x_field + 20, y + 10, 2362, 2360, los_checked, 16 );
  GFTextLine( gump, x_field + 150, y + 10, 2100, "BOSS:" );
  GFCheckBox( gump, x_field + 200, y + 10, 2362, 2360, boss_checked, 17 );

  // Add OK button
  y += 70;
  GFAddButton( gump, 260, y, 0x81C, 0x81B, GF_CLOSE_BTN, 100 );

  // Display the GUMP
  GFSendGump( who, gump );
endprogram

function AdicionarMoldura( byref gump )
  var molduras := array{ struct{ x := 0,
                                 y := 0,
                                 width := 25,
                                 height := 25,
                                 gump := 39925 },
                         struct{ x := GUMP_WIDTH - 25,
                                 y := 0,
                                 width := 35,
                                 height := 25,
                                 gump := 39927 },
                         struct{ x := 25,
                                 y := 0,
                                 width := GUMP_WIDTH - 41,
                                 height := 25,
                                 gump := 39926 },
                         struct{ x := 25,
                                 y := GUMP_HEIGHT - 25,
                                 width := GUMP_WIDTH - 25,
                                 height := 35,
                                 gump := 39932 },
                         struct{ x := 0,
                                 y := 25,
                                 width := 10,
                                 height := GUMP_HEIGHT - 50,
                                 gump := 39928 },
                         struct{ x := GUMP_WIDTH - 25,
                                 y := 25,
                                 width := 35,
                                 height := GUMP_HEIGHT - 50,
                                 gump := 39930 },
                         struct{ x := GUMP_WIDTH - 25,
                                 y := GUMP_HEIGHT - 25,
                                 width := 35,
                                 height := 35,
                                 gump := 39933 },
                         struct{ x := 0,
                                 y := GUMP_HEIGHT - 25,
                                 width := 35,
                                 height := 35,
                                 gump := 39931 }
                         };

  foreach moldura in molduras
    GFGumpPicTiled( gump, moldura.x, moldura.y, moldura.width, moldura.height, moldura.gump );
  endforeach
endfunction