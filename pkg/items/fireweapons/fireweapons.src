use uo;
use os;
include "include/say";
include "include/client";
include ":timedScripts:timedScripts";
include "include/sounds";
include ":combat:damage";
include "include/facings";

program fireweapons(who, item)
    Set_Script_Option(SCRIPTOPT_NO_RUNAWAY, 1);

    // Check if weapon is equipped
    if (!IsWeaponEquipped(who, item))
        SendSysMessageEx(who, "Voce precisa equipar a arma.", SSM_FAIL);
        return;
    endif

    // Check if weapon is properly bound
    if (!IsWeaponBound(who, item))
        SendSysMessageEx(who, "Você é incapaz de manusear a arma. [Anti Mulling]", SSM_FAIL);
        return;
    endif

    var weapon_info := GetWeaponInfo(item);
    if (!weapon_info)
        return;
    endif

    // Check ammo and reload if needed
    var balas := CInt(GetObjProperty(item, "balas"));
    if (balas <= 0)
        if (!ReloadWeapon(who, item, weapon_info))
            return;
        endif
    endif

    // Handle targeting and shooting
    FireWeapon(who, item, weapon_info);
endprogram

function GetWeaponInfo(item)
    var info := struct{
        "type" := "",
        "powder_amt" := 1,
        "reload_time" := 2,
        "min_dist" := 1,
        "max_range" := 6,
        "dmg_dice" := "2d4",
        "shot_sound" := 0x4D0
    };

    case (item.objtype)
        0xC5FD: // Pistol
        0xC5FE:
            info.type := "pistol";
            info.powder_amt := 1;
            info.reload_time := 2;
            info.shot_sound := 0x11C;
            
        0xC5FF: // Hand Cannon
            info.type := "handcannon";
            info.powder_amt := 5;
            info.reload_time := 6;
            info.min_dist := 2;
            info.dmg_dice := "8d10";
            info.shot_sound := 0x308;
            
        0xC600: // Carabine
            info.type := "carabine";
            info.powder_amt := 2;
            info.reload_time := 3;
            info.min_dist := 3;
            info.max_range := 12;
            info.dmg_dice := "4d6";
            info.shot_sound := 0x309;
            
        0x89A7: // Musket
            info.type := "musket";
            info.powder_amt := 3;
            info.reload_time := 4;
            info.min_dist := 4;
            info.max_range := 20;
            info.dmg_dice := "6d8";
            info.shot_sound := 0x11E;
            
        default:
            return 0;
    endcase

    return info;
endfunction

function ReloadWeapon(who, item, weapon_info)
    // Check if environment is too wet
    if (GetObjProperty(who, "molhado"))
        SendSysMessageEx(who, "Voce nao consegue recarregar com o clima umido.", SSM_FAIL);
        return 0;
    endif

    // Check for required items in backpack
    var ammo := FindObjtypeInContainer(who.backpack, 0x9090);
    var powder := FindObjtypeInContainer(who.backpack, 0x9092);
    var powder_fixer := FindObjtypeInContainer(who.backpack, 0xC611);

    if (!ammo || !powder || !powder_fixer)
        SendSysMessageEx(who, "Voce precisa de municao, polvora e um socador de polvora em sua bolsa.", SSM_FAIL);
        return 0;
    endif

    var powder_needed := weapon_info.powder_amt;
    if (TemHabilidade(who, "Municiador Experiente") && powder_needed > 2)
        powder_needed := 2;
    endif

    if (powder.amount < powder_needed)
        SendSysMessageEx(who, "Voce nao tem polvora suficiente.", SSM_FAIL);
        return 0;
    endif

    var current_x := who.x;
    var current_y := who.y;
    
    // Start reloading process
    printtext(who, "*Coloca polvora na arma*");
    if (!SubtractAmount(ammo, 1) || !SubtractAmount(powder, powder_needed))
        SendSysMessageEx(who, "Falha ao consumir os materiais.", SSM_FAIL);
        return 0;
    endif

    printtext(who, "*Socando a polvora*");
    
    var reload_time := weapon_info.reload_time;
    if (TemHabilidade(who, "Municiador Experiente"))
        reload_time := CInt(reload_time/2);
    endif

    // Animation and sound effects
    var i := 0;
    for (i := 0; i < reload_time; i++)
        if (who.x != current_x || who.y != current_y)
            SendSysMessage(who, "Você só consegue recarregar essa arma parado.");
            return 0;
        endif
        PlaySoundEffect(who, SFX_HIT_19);
        sleep(1);
    endfor

    printtext(who, "*Municiando o equipamento*");
    for (i := 0; i < 2; i++)
        if (who.x != current_x || who.y != current_y)
            SendSysMessage(who, "Você só consegue recarregar essa arma parado.");
            return 0;
        endif
        PlaySoundEffect(who, SFX_FARMING);
        sleep(2);
    endfor

    PlaySoundEffect(who, SFX_HIT_11);
    SetObjProperty(item, "balas", 1);
    printtext(who, "*Arma recarregada*");
    updateToolTip(item);
    
    return 1;
endfunction

function FireWeapon(who, item, weapon_info)
    SendSysMessageEx(who, "Escolha o alvo.", SSM_REQUEST);
    var targ := Target(who, TGTOPT_CHECK_LOS + TGTOPT_HARMFUL);
    if (!targ || targ.isa(POLCLASS_ITEM))
        SendSysMessageEx(who, "Alvo invalido.", SSM_FAIL);
        return;
    endif

    // Handle aiming and shooting
    if (!AimAndShoot(who, item, targ, weapon_info))
        return;
    endif

    // Update ammo count
    var balas := CInt(GetObjProperty(item, "balas")) - 1;
    SetObjProperty(item, "balas", balas);
    updateToolTip(item);
endfunction

function AimAndShoot(who, item, targ, weapon_info)
    var dist := Distance(who, targ);
    
    // Check minimum distance
    var min_dist := weapon_info.min_dist;
    if (GetObjProperty(who, "Cano Serrado"))
        min_dist -= 1;
    endif
    
    if (dist < min_dist)
        SendSysMessageEx(who, "O alvo esta muito proximo!", SSM_FAIL);
        return 0;
    endif

    // Handle aiming animation
    TurnObjectToward(who, targ.x, targ.y);
    PrintText(who, "*mirando em {}*".format(targ.name));
    PlaySoundEffect(who, 0x667);
    
    who.frozen := 1;
    var i := 0;
    for (i := 1; i < weapon_info.reload_time; i++)
        PerformAction(who, 0x13);
        sleep(1);
    endfor
    who.frozen := 0;

    if (!CheckLineOfSight(who, targ))
        SendSysMessageEx(who, "O alvo saiu do seu campo de visao.", SSM_FAIL);
        return 0;
    endif

    // Calculate and deal damage
    var dmg := CalculateWeaponDamage(who, item, targ, weapon_info, dist);
    
    // Handle wet powder
    if (GetObjProperty(who, "molhado"))
        SendSysMessageEx(who, "A polvora esta molhada", SSM_FAIL);
        PlaySoundEffect(who, 0x4D0);
        return 0;
    endif

    // Handle weapon malfunction
    if (RandomFloat(100) <= 5 && !TemHabilidade(who, "Artilheiro preparado"))
        SendSysMessageEx(who, "O tiro saiu pela culatra!", SSM_FAIL);
        DestroyItem(item);
        DamageFLS(who, dmg, DMG_FORCED, who);
        return 0;
    endif

    // Visual and sound effects
    PlayObjectCenteredEffect(who, GFX_FIZZLE, 5, 50);
    PlayMovingEffect(who, targ, FX_EXPLODE_1, 5, 1, 1);
    PlaySoundEffect(who, weapon_info.shot_sound);
    
    DamageFLS(targ, dmg, DMG_FORCED, who);
    return 1;
endfunction

function CalculateWeaponDamage(who, item, targ, weapon_info, dist)
    var dmg := RandomDiceRoll(weapon_info.dmg_dice);
    
    if (GetObjProperty(who, "Municao Explosiva"))
        dmg += RandomDiceRoll("4d6");
    endif

    var max_range := weapon_info.max_range;
    if (GetObjProperty(who, "Mira Telescopica"))
        max_range += 4;
    endif

    if (dist > max_range)
        if (weapon_info.type == "handcannon")
            dmg := 0;
        else
            dmg -= (dist - max_range) * 5;
        endif
    endif

    var skill_dmgmod := TACTICS;
    if (TemHabilidade(who, "Artilheiro Preparado"))
        skill_dmgmod := METALWORKING;
    endif

    dmg += CInt(AP_GetStat(who, DEXTERITY) / 10) + CInt(AP_GetSkill(who, skill_dmgmod) / 10);

    if (GetObjProperty(item, "Excepcional"))
        dmg := CInt(dmg * 1.2);
    endif

    return dmg;
endfunction

function IsWeaponEquipped(who, item)
    var weapon1 := GetEquipmentByLayer(who, LAYER_HAND1);
    var weapon2 := GetEquipmentByLayer(who, LAYER_HAND2);
    return (item.objtype == weapon1.objtype || item.objtype == weapon2.objtype);
endfunction

function IsWeaponBound(who, item)
    var weapon1 := GetEquipmentByLayer(who, LAYER_HAND1);
    var weapon2 := GetEquipmentByLayer(who, LAYER_HAND2);
    return (GetObjProperty(weapon1, "serialid") == who.serial || GetObjProperty(weapon2, "serialid") == who.serial);
endfunction