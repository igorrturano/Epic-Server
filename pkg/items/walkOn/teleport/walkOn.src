/*
 * $Id: walkOn.src 111 2006-05-27 07:59:36Z austinheilman $
 *
 */

use uo;
use os;
use polsys;
include ":fls_core:fls_characters";
include ":taming:taming";

program walkOn(mobile, tile)
	if ( JustTeleported(mobile) )
		return 0;
	endif

	var pets := ListPetsNear(mobile, 4);
	var hostiles := ListHostiles(mobile, 4);
	var racesAllowed := GetObjProperty(tile, "Destination").race;
	if (racesAllowed == "all")
		racesAllowed := array{ANAO, DROW, ELFO, ORC, HUMANO, POLSKI};
	else
		racesAllowed := splitWords(racesAllowed);
	endif
	
	var result;
	if ( mobile.getRace() in racesAllowed )
		result := tile.SendToDestination(mobile);
	else
		SendSysMessageEx(mobile, "Seu tamanho não é proporcional, logo você não conseguiu passar!", SSM_FAIL);
		return 0;
	endif

	SetObjProperty(mobile, "#Teleported", ReadMillisecondClock());
	if ( result.errortext )
		SendSysMessage(mobile, "Error teleporting ->"+result.errortext);
	endif

	foreach pet in pets
		SetObjProperty(pet, "#Teleported", ReadMillisecondClock());
		tile.SendToDestination(pet);
	endforeach

	if (hostiles[1])
		foreach x in hostiles
			if (!x.acctname)
				SetObjProperty(x, "#Teleported", ReadMillisecondClock());
				tile.SendToDestination(x);
			endif
			sleepms(10);
		endforeach
	endif

	if (HaveReverseVision(mobile))
		if (mobile.cmdlevel > 1)
			SendsysMessage(mobile, "GM: Ajustando infravisao.");
		endif
		ReverseLight(mobile);
	endif
	destroyIllyraOutsideDungeons(mobile);
	return 1;
endprogram

function JustTeleported(mobile)
	var tele_time := CInt(GetObjProperty(mobile, "#Teleported"));
	if ( tele_time > ReadMillisecondClock()-500 )
		// Mobile just teleported. Too soon to teleport again.
		return 1;
	else
		// Safe to teleport the mobile
		return 0;
	endif
endfunction
