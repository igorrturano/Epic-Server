use uo;
use os;
use util;
use cfgfile;

const TINY_WAIT := 2;
const RESPAWN_DELAY := 120 * 3600; // 2 horas

include "champaltar";
include ":tn:boss";

program control(altar)
    while (GetObjProperty(altar, "config") == error)
        printtextabove(altar, "Sem config" + GetObjProperty(altar, "config"));
        sleep(10);
    endwhile

    var mobsBySerial := dictionary{};
    var totalMobs := array{};

    var cfg := GetObjProperty(altar, "config");
    totalMobs[1] := cfg.amtlvl1;
    totalMobs[2] := cfg.amtlvl2;
    totalMobs[3] := cfg.amtlvl3;

    if (!GetObjProperty(altar, "spawned"))
        mobsBySerial[1] := summonLevelMobs(altar, 1, mobsBySerial, totalMobs[1]);
        mobsBySerial[2] := summonLevelMobs(altar, 2, mobsBySerial, totalMobs[2]);
        mobsBySerial[3] := summonLevelMobs(altar, 3, mobsBySerial, totalMobs[3]);

        SetObjProperty(altar, "spawned", 1);
    endif
    SetObjProperty(altar, "mobsBySerial", mobsBySerial);
    while (altar)
            var mobs := GetObjProperty(altar, "mobsBySerial");

        validateAndResummonMobs(altar, mobs, totalMobs);
        sleep(RESPAWN_DELAY);
    endwhile

    return 0;
endprogram

function getEpicSpawnLocation(altar)
    var cfg := GetObjProperty(altar, "config");
    var rect := cfg.rect;
    var loc := SplitWords(rect);

    var xMin := Cint(loc[1]);
    var yMin := Cint(loc[2]);
    var xMax := Cint(loc[3]);
    var yMax := Cint(loc[4]);

    var x := RandomIntMinMax(xMin, xMax);
    var y := RandomIntMinMax(yMin, yMax);
    var z := GetMapInfo(x, y).z;

    return {x, y, z};
endfunction

function summonLevelMobs(altar, level, mobsBySerial, totalMobs)
    var amt := Cint(totalMobs);
    mobsBySerial := dictionary{};
    mobsBySerial[level] := array{};

    while (amt > 0)
        var loc := getEpicSpawnLocation(altar);
        var mobTemplate := getEpicSpawn(altar, level);
        var creature := CreateNPCFromTemplate(":brainai:"+mobTemplate, loc[1], loc[2], loc[3], 0, altar.realm);
        customizeNpc(creature);
        if (creature && creature != error)
            mobsBySerial[level].append(creature.serial);
            amt := amt - 1;
        endif
        sleep(TINY_WAIT);
    endwhile
    return mobsBySerial[level];
endfunction

function validateAndResummonMobs(altar, mobsBySerial, totalMobs)
    var levels := {1, 2, 3};  // Assuming levels 1, 2, and 3

    foreach level in levels
        if (!mobsBySerial[level])
            mobsBySerial[level] := array{};
        endif

        var currentMobs := array{};
        var mobs := mobsBySerial[level];

        // Check existing mobs
        foreach serial in mobs
            var mob := SystemFindObjectBySerial(serial);
            if (mob)
                currentMobs.append(serial);
            endif
        endforeach

        // Calculate the number of missing mobs
        var missingCount := Cint(totalMobs[level]) - Cint(currentMobs.size());

        // Summon missing mobs
        if (missingCount > 0)
            var i;
            for (i := 1; i <= missingCount; i++)
                var loc := getEpicSpawnLocation(altar);
                var mobTemplate := getEpicSpawn(altar, level);
                var creature := CreateNPCFromTemplate(":brainai:"+mobTemplate, loc[1], loc[2], loc[3], 0, altar.realm);
                customizeNpc(creature);
                if (creature && creature != error)
                    currentMobs.append(creature.serial);
                endif
                sleep(TINY_WAIT);
            endfor
        endif

        mobsBySerial[level] := currentMobs;
        SetObjProperty(altar, "mobsBySerial", mobsBySerial);
        return;
    endforeach
endfunction

function getEpicSpawn(altar, level)
    var cfg := GetObjProperty(altar, "config");
    var spawns;

    if (level == 1)
        spawns := SplitWords(cfg.mobslvl1);
    elseif (level == 2)
        spawns := SplitWords(cfg.mobslvl2);
    else
        spawns := SplitWords(cfg.mobslvl3);
    endif

    if (!spawns)
        PrintTextAbove(altar, "ERRO: " + spawns);
        return error;
    endif

    var chosenSpawn := spawns[RandomInt(spawns.size()) + 1];
    return chosenSpawn;
endfunction

function customizeNpc(mob)
	var npc_elem := NPC_GetNPCConfig(mob);

	var Hits := npc_elem.HITS;
	var classe := npc_elem.Classe;
	var tier := npc_elem.Tier;
    var npc_wrestling := npc_elem.WRESTLING;
    var npc_tactics := npc_elem.TACTICS;

    var calculate_level_hp := Cint(npc_wrestling + npc_tactics - 80);

	var hp := 25;
	if (classe == SABIO)
		hp := 15;
	elseif (classe == LADINO)
		hp := 20;
	endif

	var hitsmod := GetObjProperty(mob, "hitsmod");
	if (!hitsmod)
		hitsmod := 0;
	endif
    if ((calculate_level_hp / 6) >= 1 )
        var new_hp := 0;
        var multiplier := Cint((calculate_level_hp / 6));
        if (classe == GUERREIRO)
            new_hp := 10 * multiplier;
        elseif (classe == LADINO)
            new_hp := 8 * multiplier;
        else
            new_hp := 6 * multiplier;
        endif
        hp += Cint(new_hp);
    endif

	SetObjProperty(mob, "hitsmod", hitsmod + hp);

	RecalcVitals(mob);
    HealDamage(mob, hitsmod + hp);

	var mob_skill := 0;
	if (tier == 1)
		mob_skill += RandomIntMinMax(20, 40);
	elseif (tier == 2)
		mob_skill += RandomIntMinMax(40, 60);
	elseif (tier == 3)
		mob_skill += RandomIntMinMax(60, 80);
    elseif (tier == 4)
        mob_skill += RandomIntMinMax(80, 100);
    elseif (tier == 5)
        mob_skill += RandomIntMinMax(100, 120);
    else
        mob_skill += RandomIntMinMax(0, 20);
	endif
    
    var tactics := RandomIntMinMax(tier * 20, tier * 30);

	AP_SetTrueSkill(mob, WRESTLING, mob_skill);
	AP_SetTrueSkill(mob, TACTICS, tactics);

endfunction