use vitals;
use npc;
use os;
use uo;
use cfgfile;

include "include/client";
include ":attributes:attributes";
include ":attributes:attributes_ex";
include "include/eventID";
include "include/sysEvent";
include "include/eventID";
include ":npcs:randName";
include ":npcs:garment";
include "include/anchors";
include ":npcs:skillLists";
include ":timedScripts:poisonUtil";
include ":damage:damage";
include "include/speech";

var flee_point := 0;
var npccfg := ReadConfigFile(":*:npcdesc");

const HALT_THRESHOLD := 10;
var me := Self();
var cfgfile     := ReadConfigFile("::gzone");
var keys        := GetConfigStringKeys(cfgfile);
var next_wander := ReadGameClock() + 30;
var nextchk     := ReadGameClock() + 120;

program CastleGuard()
  SetObjProperty(me, "MerchantType", "BattleMage");
  start_script("NPCKeeper", me);
  var myanchor := GetObjProperty(me, "Anchor");
  if(myanchor)
    MoveObjectToLocation(me, myanchor[1], myanchor[2], myanchor[3], me.realm, MOVEOBJECT_FORCELOCATION);
  endif
  drop_anchor();
  myanchor := GetObjProperty(me, "Anchor");
  // Added in attempt to get out of the node system.
  EnableEvents(SYSEVENT_SPEECH, 3);
  EnableEvents( SYSEVENT_ENGAGED + SYSEVENT_DISENGAGED + SYSEVENT_DAMAGED );
  EnableEvents( SYSEVENT_ENTEREDAREA + SYSEVENT_LEFTAREA, HALT_THRESHOLD );
  EnableEvents(SYSEVENT_OPPONENT_MOVED);

//  EnableEvents(SYSEVENT_ENGAGED);
//  EnableEvents(EVID_NODE);
  SetWarMode(0);
  set_priority(100);
  var ev;
  var evtext;
  evtext := evtext;
  next_wander := ReadGameClock() + 10;
  var wanders := 9;
  wanders := wanders;
  var txt;
  txt := txt;
  var ph := SplitWords(me.name);
  var myname := lower(ph[1]);
  myname := myname;
  while (1)
    ev := os::wait_for_event(120);
	if (ev)
      case(ev.type)
      SYSEVENT_SPEECH:      var tspeech := process_text(ev.text, "default","default");
                        txt := lower(ev.text);
                        if(tspeech)
                          say(tspeech);
                        elseif(txt[myname] && (txt["train"] || txt["teach"]))
                          TurnToward(ev.source);
                          MerchantTrain(me, ev.source, ev.text);
                        endif
		SYSEVENT_ITEM_GIVEN:  TrainSkill(me, ev.source, ev.item);
		SYSEVENT_ENTEREDAREA:	if(ev.murderer)
														SendSysMessage(ev, "You are a murderer!", color := 33);
														Fight(ev);
													endif
        SYSEVENT_ENGAGED:    if((ev.source) && (!ev.source.dead))
		                       say("Thou wilt regret thine actions, swine!");
                               Fight(ev.source);
                             endif
        SYSEVENT_DAMAGED:    if((ev.source) && (!ev.source.dead))
		                       say("Thou wilt regret thine actions, swine!");
                               Fight(ev.source);
                             endif
		SYSEVENT_LEFTAREA:

      endcase
	endif
	if(ReadGameClock() >= next_wander)
      if(CoordinateDistance(me.x, me.y, myanchor[1], myanchor[2]) > 15)
        MoveObjectToLocation(me, myanchor[1], myanchor[2], myanchor[3], me.realm, MOVEOBJECT_FORCELOCATION);
      endif
      next_wander := ReadGameClock() + 10;
    endif
    if(ReadGameClock() > nextchk)
      lookiehere();
      nextchk := ReadGameClock() + 120;
    endif
  endwhile
endprogram

function WanderMe()
  wander();
  if(CoordinateDistance(me.x, me.y, myanchor[1], myanchor[2]) > 15)
    MoveObjectToLocation(me, myanchor[1], myanchor[2], myanchor[3], me.realm, MOVEOBJECT_FORCELOCATION);
  endif
endfunction

function lookiehere()
  foreach npc in ListMobilesNearLocation(me.x, me.y, me.z, 15, me.realm)
    foreach listing in keys
      var range := SplitWords(cfgfile[listing].range);  //check to see if npc is in guard zone, and act accordingly
      if((npc.x >= CInt(range[1])) && (npc.x <= CInt(range[3])) && (npc.y >= CInt(range[2])) && (npc.y <= CInt(range[4])))
        var timer := Cint(GetObjProperty(npc, "guardstimer"));
      	if((npc.criminal) and (!npc.dead))
          if(timer < ReadGameClock())
            SetObjProperty(npc, "#guardstimer", ReadGameClock() + 15);
      	    Fight(npc);
          endif
      	elseif(((npc.script == "tamed") || (npc.script == "employed")) and (npc.criminal))
          if(timer < ReadGameClock())
            SetObjProperty(npc, "#guardstimer", ReadGameClock() + 15);
      	    Fight(npc);
          endif
        elseif((!npccfg[npc.npctemplate].guardignore) and (npc.isA(POLCLASS_NPC)))
          if(timer < ReadGameClock())
            SetObjProperty(npc, "#guardstimer", ReadGameClock() + 15);
      	    Fight(npc);
          endif
        endif
        break;
      endif
    endforeach
  endforeach
endfunction

function Fight(opponent)
  SetAnchor( me.x, me.y, 20, 0 );
  if(opponent.isA(POLCLASS_NPC))
	SetObjProperty(opponent, "guardkill", 1);
  endif
  if((opponent.cmdlevel > 0) || (opponent.serial == me.serial))
    SetWarMode(0);
    opponent := 0;
	return;
  endif
  if(opponent.multi.serial)
	if(me.multi.serial != opponent.multi.serial)
      SetWarMode(0);
      opponent := 0;
	  return;
	endif
  endif
  var parms := {};
  parms[1] := me.x;
  parms[2] := me.y;
  parms[3] := me.z;
  SetObjProperty(me, "StartCoords", parms);
  var tries := 0;
  while(((Distance(me, opponent) > 7) || (!CheckLineOfSight(me, opponent))) and (tries < 5))
    var newx := opponent.x + RandomInt(4) - RandomInt(4);
    var newy := opponent.y + RandomInt(4) - RandomInt(4);
    sleepms(500);
    MoveObjectToLocation(me, newx, newy, opponent.z, me.realm, MOVEOBJECT_FORCELOCATION);
    tries := tries + 1;
  endwhile
  var gate := CreateItemAtLocation(me.x, me.y, me.z, 0xdda, 1, me.realm);
  PlaySoundEffect(gate, 0x20f);
  sleepms(200);
  me.concealed := 0;
  sleepms(200);
  DestroyItem(gate);
  PrintTextAbove(me, "Thou wilt regret thine actions, swine!");
  TurnToward(opponent);
  PerformAction(me, 17);
  opponent.frozen := 1;
  sleep(1);
  PlaySoundEffect(opponent, 0x2a);
  PlayLightningBoltEffect(opponent);
  sleepms(100);
  PlayLightningBoltEffect(opponent);
  sleepms(100);
  PlayLightningBoltEffect(opponent);
  sleepms(100);
  PlayLightningBoltEffect(opponent);
  sleepms(100);
  KillMobile(opponent);
  sleep(1);
  PerformAction(me, 17);
  sleepms(200);
  gate := CreateItemAtLocation(me.x, me.y, me.z, 0xdda, 1, me.realm);
  PlaySoundEffect(gate, 0x20f);
  sleepms(200);
  me.concealed := 1;
  sleep(1);
  DestroyItem(gate);
  set_priority(50);
  var loops := 0;
  loops := loops;
  var ev;
  ev := ev;
  var waittime := 0;
  waittime := waittime;
  post_combat();
  return;
endfunction

function post_combat()
  DisableCombatEvents();
  EnableMainEvents();
  SetWarMode(0);
  SetOpponent(0);
  lookiehere();
	var allpoisons := TS_GetTimerNames(me, "P");
	if(allpoisons.Size() > 0)
		foreach poison in allpoisons
			poison := poison; // Avoid compiler warnings
			TS_CurePoison(me, 100000, "P", 5);
		endforeach

		PlaySoundEffect(me, 0x31);
		sleep(1);
	endif
  if(AP_GetVital(me, HITS) < AP_GetStat(me, STRENGTH))
    sleep(1);
    PerformAction(me, 0x22);
    AP_SetVital(me, HITS, me.strength);
    PlaySoundEffect(me, 0x32);
    sleep(1);
  endif
  lookiehere();
  sleep(1);
  RestartScript(me);
endfunction

function CloseDistance( opponent )
  case (Distance( me, opponent ))
    1:
    0:       return 1;
    default: RunToward( opponent );
             return 0;
  endcase
endfunction

function CheckForCriminals(jerk)
  if(jerk.dead)
	return;
  endif
  if(jerk.criminal)
	say("Thou wilt regret thine actions, swine!");
	Fight(jerk);
  endif
endfunction

function cleareventque()
  var ev;
  repeat
  until(!(ev := os::wait_for_event(0)));
endfunction

function prepare_for_fight(opponent)
  DisableMainEvents();
  EnableCombatEvents();
endfunction

function EnableMainEvents()
    cleareventque();
    DisableEvents(SYSEVENT_DISENGAGED);
    EnableEvents(SYSEVENT_ENGAGED + SYSEVENT_DAMAGED);
    EnableEvents(SYSEVENT_ITEM_GIVEN);
endfunction

function DisableMainEvents()
    cleareventque();
    DisableEvents(SYSEVENT_ENGAGED + SYSEVENT_DAMAGED );
    DisableEvents(SYSEVENT_ITEM_GIVEN);
endfunction

function EnableCombatEvents()
    EnableEvents( SYSEVENT_ENGAGED + SYSEVENT_DAMAGED + EVID_PEACEMADE );
endfunction

function DisableCombatEvents()
    DisableEvents( SYSEVENT_ENGAGED + SYSEVENT_DAMAGED + EVID_PEACEMADE );
endfunction

function in_combat_event_loop(opponent, loops)
  if(GetObjProperty(me, "poison_level"))
    sleep(1);
    PerformAction(me, 0x22);
    EraseObjProperty(me, "poison_level");
    PlaySoundEffect(me, 0x31);
    sleep(1);
  endif
  if(AP_GetVital(me, HITS) < (AP_GetStat(me, STRENGTH) / 2))
    sleep(1);
    PerformAction(me, 0x22);
    AP_SetVital(me, HITS, me.strength);
    PlaySoundEffect(me, 0x32);
    sleep(1);
  endif
  if(loops > 50)
	RestartScript(me);
	return;
  endif
endfunction

function MerchantTrain(me, who, text)
  var totaltrain := 0;
  var words := SplitWords(text);
  var skill := words[3];
  if(!skill)
    var trainable := "";
    var holder := "";
    foreach thing in getskilllist(me)
      if(holder == "")
        holder := thing;
      else
        holder := holder + ", " + thing;
      endif
      totaltrain := totaltrain + 1;
    endforeach
    trainable  := trainable + holder;
    if(totaltrain > 0)
      say("I can train thee in the following skills:");
      say(trainable);
    else
      say("I can not train thee.");
    endif
  else
    skill := lower(skill);
    skill := FindSkillId(skill);
    var npclevel := 33;
    var pclevel;
    foreach thing in getskilllist(me)
      if(lower(thing) == skill)
        pclevel := AP_GetSkill(who, AP_SkillIDToAttributeName(thing));
        if(pclevel > npclevel)
          say("I cannot teach you anymore.");
          return;
        else
          var trainmaxcost := GoldForSkillGain(npclevel, pclevel, thing);
          say("I will train thee " + thing + " for " + trainmaxcost + " gold.");
          SetObjProperty(who, "TrainMaxCost", trainmaxcost);
          SetObjProperty(who, "TrainSkillID", thing);
          return;
        endif
      endif
    endforeach
    say("I know not of that skill.");
  endif
endfunction

function TrainSkill(me, who, item)
  var variance := 0;
  var npc_level := 0;
  var pc_level := 0;
  var goldreceived := 0;
  var new_level := 0;
  var currentnpccost := 0;
  if((item.objtype == 0xeed) && (item.amount != 0))
    var trainmaxcost := GetObjProperty(who, "TrainMaxCost");
    var trainskillid := GetObjProperty(who, "TrainSkillID");
    if((!trainmaxcost || !trainskillid) && trainskillid != 0)
      say("I don't know what this is for, but thanks!");
      DestroyItem(item);
      return;
    endif
    if(AP_GetSkill(me, AP_SkillIDToAttributeName(trainskillid)))
      npc_level    := 33;
      pc_level     := AP_GetSkill(who, AP_SkillIDToAttributeName(trainskillid));
      goldreceived := item.amount;
      variance     := npc_level - pc_level;
      currentnpccost := GoldForSkillGain(npc_level, pc_level, trainskillid);
      if(pc_level < npc_level)
        if(currentnpccost != trainmaxcost)
          if(currentnpccost > trainmaxcost)
            npc_level := SkillGainForGold(npc_level, pc_level, trainskillid, trainmaxcost);
            variance  := npc_level - pc_level;
          else
            if(goldreceived > currentnpccost)
              say("I can not train thee to that level.");
              MoveItemToContainer(item, who.backpack);
              return;
            else
              trainmaxcost := currentnpccost;
            endif
          endif
        endif
        if(trainmaxcost <= goldreceived)
          new_level := (npc_level * 10);
          EraseObjProperty( who, "TrainMaxCost" );
          EraseObjProperty( who, "TrainSkillID" );
        else
          new_level := ((pc_level + CInt((CDbl(variance) * (CDbl(goldreceived) / CDbl(trainmaxcost))))) * 10);
          SetObjProperty( who, "TrainMaxCost", trainmaxcost-goldreceived );
        endif
        say("Let me show you how it's done.");
        SetBaseSkillBaseValue(who, trainskillid, new_level);
        DestroyItem(item);
        SendSysMessage(who, "Your skill increases.");
      else
        say("I'm not as good as thee.  Please find another to train thee.");
        MoveItemToContainer(item, who.backpack);
      endif
    else
      say("I don't know that skill. Why don't you ask me what i can train you in?");
      MoveItemToContainer(item, who.backpack);
    endif
  else
    say("Bah, I have no use for this. Be off with ye.");
    MoveItemToContainer(item, who.backpack);
  endif
endfunction

function GoldForSkillGain( npc_skill, pc_skill, unused skillid )
  var maxskill := npc_skill - pc_skill;
  return maxskill*10;
endfunction

function SkillGainForGold(unused npc_level, pc_level, unused trainskillid, goldreceived)
  return (goldreceived/10) + pc_level;
endfunction